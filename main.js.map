{"version":3,"sources":["crypto (ignored)","./src/app/services/process/processSingleTable.ts","./src/app/components/csv-header-selection/csv-header-selection.component.ts","./src/app/components/csv-header-selection/csv-header-selection.component.html","./src/environments/environment.ts","./src/app/services/validation/validateReferentialIntegrity.ts","./src/app/services/csv.worker.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/services/validation/validation.service.ts","./src/app/components/csv-header-selection/csv-header-table/csv-header-table.component.ts","./src/app/components/csv-header-selection/csv-header-table/csv-header-table.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/models/CsvSelectionData.ts","./src/app/models/index.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/application/application.component.ts","./src/app/components/application/application.component.html","./src/app/models/CsvHeaderMetaRow.ts","./src/app/app.module.ts","./src/app/models/localstorage.ts","./src/app/services/component-data.service.ts","./src/app/services/validation/validateAllTablesContainPrimaryKeyHeader.ts","./src/app/services/process/data-process.service.ts","./src/app/services/validation/validateKeyValues.ts","./src/app/services/validation/validateUniqueKeyValues.ts","./src/app/services/validation/rowConverter.ts","./src/app/models/CsvSelectionDataAssemblyContainer.ts","./src/app/services/state.service.ts","./src/aws-exports.js","./src/app/components/csv-process/csv-process.component.ts","./src/app/components/csv-process/csv-process.component.html","./src/app/services/csv.service.ts","./src/app/app-routing.module.ts","./src/app/models/error.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object","./src/app/services/process/processMultipleTables.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["/* (ignored) */","import { StateService } from '../../services/state.service';\nimport { CsvSelectionData } from '../../models';\nimport { ValidationService } from '../validation';\n\nexport function processSingleTable(\n    dataMap: Map<number, CsvSelectionData>,\n    s: StateService,\n    v: ValidationService) {\n\n    const keyHeader = s.keySnapshot()\n\n    if (keyHeader) {\n        if (!v.validate(v.singleTableValidators, dataMap, s.OS.S.LOAD_AND_PROCESSING_ERRORS)) {\n            return false\n        }\n    }\n\n    //======================================\n    // The mappedData property \n    // on the selectionData\n    // reference is what we will return\n    //======================================\n    const CSD = dataMap.get(0);\n\n    //======================================\n    // Map the Data\n    //======================================\n    CSD.mapData();\n\n    if (CSD.getSelectedHeaders().length) {\n        CSD.mappedData.stickyHeaders =\n            keyHeader ?\n                [keyHeader] : []\n\n        s.OS.put(\n            s.OS.S.PROCESS_RESULT,\n            CSD.mappedData)\n    }\n    return true\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { ComponentDataService } from '../../services/component-data.service'\nimport { CsvService } from '../../services/csv.service';\nimport { StateService } from '../../services/state.service';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { CsvSelectionData } from '../../models';\nimport { CsvFile } from '@fireflysemantics/csv';\nimport { combineLatest, Observable } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport { map } from 'rxjs/operators';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-csv-header-selection',\n  templateUrl: './csv-header-selection.component.html',\n  styleUrls: ['./csv-header-selection.component.scss']\n})\nexport class CsvHeaderSelectionComponent implements OnInit {\n\n  /**\n   * The name of the CSV file\n   */\n  csvFileName: string = ''\n\n  /**\n   * The index is assigned to the meta\n   * property which is assigned to the \n   * CSV Load component.  \n   * \n   * The index is also used by the \n   * csv header table to look up\n   * the data from the data map.\n   * \n   * We assign the index dynamically when\n   * creating the component.\n   */\n  @Input()\n  index: number\n\n  /**\n   * The headers to select the key from.\n   */\n  headers: string[] = null\n\n  /**\n   * The select key\n   */\n  keyControl: FormControl = new FormControl()\n\n  isSelectionDataLoaded: boolean = false\n\n  /**\n   * The meta property \n   * that we assign to the \n   * load csv component. \n   * \n   * It contains the index.\n   * \n   * The csv load component\n   * takes a meta property\n   * in order to make this into\n   * a generic component.  The meta\n   * property can then be passed\n   * to the CSV Service and it \n   * can retrieve the index.\n   * \n   * The meta index is initialized\n   * in ngOnInit()\n   */\n  meta: any = {}\n  ngOnInit(): void {\n    this.meta.index = this.index\n    this.keyControl.valueChanges.subscribe(k => {\n      if (this.index == 0)\n        this.s.OS.put(this.s.OS.S.SELECTED_KEY, k)\n    });\n  }\n\n  loadCSVFile(file: CsvFile) {\n    this.csv.loadCSV(file)\n  }\n  /**\n   * The CSV Service\n   * is inject into the load\n   * csv component.\n   */\n  constructor(\n    public s: StateService,\n    private cds: ComponentDataService,\n    public csv: CsvService) {\n    this.s.csvDataMap$.pipe(untilDestroyed(this)).\n      subscribe((map: Map<number, CsvSelectionData>) => {\n        if (map && !isNaN(this.index)) {\n          const csvData: CsvSelectionData = map.get(this.index)\n          if (csvData) {\n            this.csvFileName = csvData.meta.name\n            const headers = csvData.rows.map(r => r.HEADER)\n            this.headers = headers\n            this.isSelectionDataLoaded = true\n          }\n          else {\n            this.headers = null\n            this.csvFileName = ''\n            this.isSelectionDataLoaded = false\n          }\n        }\n      })\n\n    this.s.selectedKey$.pipe(untilDestroyed(this)).subscribe(sk => {\n      if (this.index != 0 && sk) {\n        this.keyControl.setValue(sk)\n      }\n    });\n  }\n\n  /**\n   * Destroy the corresponding\n   * CsvSelectionData instance.\n   */\n  delete() {\n    this.s.resetErrorState()\n    this.s.resetResultState()\n    this.cds.destroyComponent(this.index)\n  }\n\n  public headersContainKey$: Observable<boolean> = combineLatest(\n    [this.s.selectedKey$, this.s.csvDataMap$]).pipe(\n      map((arr) => {\n        const key = arr[0]\n        if (key) {\n\n          if (this.headers && this.headers.length) {\n            return this.headers.includes(key)\n          }\n        }\n        return false\n      }))\n}","<div class=\"CsvHeaderSelectionContainer\">\n    <div>\n        <fs-csv-load icon=\"view_column\"\n            [meta]=\"meta\"\n            (onFileLoad)=\"loadCSVFile($event)\">\n        </fs-csv-load>\n        <button (click)=\"delete()\"\n            mat-icon-button\n            aria-label=\"Delete CSV Column Selection Component\">\n            <mat-icon>indeterminate_check_box</mat-icon>\n        </button>\n    </div>\n    <span style=\"color: gray; \n                 font-family: 'Courier New', Courier, monospace;\">\n        {{csvFileName}}</span>\n</div>\n\n<div *ngIf=\"!!(headers && headers.length)\"\n    style=\"display: flex; align-items: center;\">\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Selected Join Key</mat-label>\n        <mat-select [formControl]=\"keyControl\"\n            [disabled]=\"index!=0\">\n            <mat-option *ngFor=\"let key of headers\"\n                [value]=\"key\">\n                {{key}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n    <ng-container *ngIf=\"isSelectionDataLoaded\">\n        <mat-icon *ngIf=\"index!=0 && (headersContainKey$ | async)\"\n            class=\"CheckBoxIcon\">check_circle</mat-icon>\n        <div style=\"display:flex; align-items: center;\"\n            *ngIf=\"index!=0 && !(headersContainKey$ | async)\">\n            <div class=\"MissingErrorContainer\">\n                <mat-icon class=\"KeyMissingErrorIcon\">bug_report</mat-icon>\n                <span>Key Missing</span>\n            </div>\n        </div>\n    </ng-container>\n</div>\n<app-csv-header-table [index]=\"index\"></app-csv-header-table>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { MissingObject, IndexedMetaError, CsvSelectionData } from '../../models'\nimport { MISSING_OBJECT_ERROR_COLUMNS, ERROR_TYPE_KEYS } from '../../models/error'\nimport { ValidationConfiguration } from './model'\n\n/**\n * Make sure to refresh state on the CsvSelectionData\n * instance so that the compound keys are generated.\n * \n * Also make sure at least one key and header from each table\n * is selected before running this method.  There should\n * be something to index on and something selected in each\n * table.\n * \n * Use `isAtLeastOneKeySelected`\n * \n * @param dataMap \n * @param errorChannel \n */\nexport function validateReferentialIntegrity(\n    dataMap: Map<number, CsvSelectionData>, config:ValidationConfiguration): IndexedMetaError {\n\n    //======================================\n    // Map the Data for \n    // each CsvSelectionData instance.\n    //======================================\n    dataMap.forEach(v => {\n        v.indexAndMapData(config.keyHeader)\n    })\n\n    const IME = new IndexedMetaError()\n    IME.tableData.headers = MISSING_OBJECT_ERROR_COLUMNS\n    IME.type = ERROR_TYPE_KEYS.REFERENTIAL_INTEGRITY_ERROR\n\n    let keyArray = []\n\n    dataMap.forEach((CSD) => {\n        //console.log(\"COMPOUND KEYS from map\")\n        //console.log([...CSD.compoundKeyMap.keys()])\n        keyArray = [\n            ...keyArray,\n            ...CSD.keyMap.keys()]\n    })\n    //console.log(\"COMPOUND KEY ARRAY\")\n    //console.log(compoundKeyArray)\n\n    const globalKeySet = new Set(keyArray)\n\n    //console.log(\"GLOBAL KEYSET\")\n    //console.log(globalKeySet)\n    //console.log(globalKeySet.size)\n\n    dataMap.forEach((CSD, CSK) => {\n        const missingObjects = []\n        globalKeySet.forEach(k => {\n            if (!CSD.keyMap.get(k)) {\n                const unMatched = new MissingObject(k, CSD.meta.name)\n                missingObjects.push(unMatched)\n            }\n        })\n        IME.indexErrors.set(CSK, missingObjects)\n        IME.indexedMeta.set(CSK, CSD.meta)\n        IME.tableData.rows = [...IME.tableData.rows, ...missingObjects]\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","module.exports = __webpack_public_path__ + \"0.worker.js\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '@fireflysemantics/amplify'\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(public as: AuthService) {\n    as.onSignInRedirectToApplication()\n    as.onSignInInitializeUser()\n  }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.as.signInWithGoogle()\n  }\n}\n","<br>\n<br>\n<h1 class=\"FSLetterLogo\"\n    style=\"margin-bottom: 2rem;\">FS\n    <span class=\"CSVLetterLogo\">CSV</span>\n</h1>\n<h2>\n    Combine Data from Different CSV Files\n</h2>\n<p>\n    Match the rows of multiple CSV\n    files by key or compound key and\n    select the result columns that the\n    output file should have.\n</p>\n<h2>\n    Reorder Columns\n</h2>\n<p>\n    Drag and Drop the columns to reorder them.\n</p>\n<h2>\n    Parser Error Detection\n</h2>\n<p>\n    Detects and displays parser\n    errors in your CSV files on load.\n</p>\n\n<h2>\n    Key Validation\n</h2>\n<p>\n    Verify that the columns that hold\n    key values have value that are defined.\n</p>\n\n<h2>\n    Compound or Single Header Key Uniqueness\n</h2>\n<p>\n    Verify that compound or single header keys\n    are unqiue.\n</p>\n\n<h2>\n    Cross Table Referential Integrity\n</h2>\n<p>\n    Verify that the keys in one table\n    having matching keys in another.\n</p>\n\n<p>\n    Click here for a\n    <a mat-button\n        href=\"https://medium.com/@ole.ersoy/introducing-firefly-semantics-csv-4e7028af5ca4\"\n        target=\"_blank\">basic tutorial</a>\n</p>\n<fs-tos-login (onSignIn)=\"this.as.signInWithGoogle()\"></fs-tos-login>","import { Injectable } from '@angular/core';\nimport { IndexedMetaError, CsvSelectionData } from '../../models'\nimport { StateService } from '../../services/state.service'\nimport { ObsValueReset } from '@fireflysemantics/slice';\nimport { validateDefinedKeyValues } from './validateKeyValues'\nimport { validateUniqueKeyValues } from './validateUniqueKeyValues'\nimport { validateReferentialIntegrity } from './validateReferentialIntegrity'\nimport { ValidationConfiguration, ValidationFunctionSignature } from './model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n\n  constructor(private s: StateService) { }\n\n  key: string = this.s.keySnapshot()\n\n  /**\n  * Sequenced array of validators when just a single table is being validated\n  */\n  public singleTableValidators: ValidationFunctionSignature[] = [validateDefinedKeyValues, validateUniqueKeyValues, validateReferentialIntegrity]\n\n  /**\n   * Sequenced array of validators when multiple tables are validated\n   */\n  public multiTableValidators: ValidationFunctionSignature[] = [validateDefinedKeyValues, validateUniqueKeyValues, validateReferentialIntegrity]\n\n\n  /**\n   * Iterates through the validators invoking each one\n   * by one, unless an IndexMetaError instance error\n   * is returned.  Then it stops and emits the error.\n   * \n   * @param dataMap The data map\n   * @param errorChannel The error channel\n   */\n  validate(validators: ValidationFunctionSignature[],\n    dataMap: Map<number, CsvSelectionData>,\n    errorChannel: ObsValueReset): boolean {\n    const config: ValidationConfiguration = { keyHeader: this.s.keySnapshot() }\n    let validationIndex: number = 0\n    let valid: boolean = true\n    let IME: IndexedMetaError\n    while (valid && validationIndex < validators.length) {\n      const validator: ValidationFunctionSignature = validators[validationIndex]\n      IME = validator(dataMap, config);\n      valid = !IME\n      validationIndex++\n    }\n    if (!valid) {\n      this.emitError(IME, errorChannel)\n    }\n    return valid\n  }\n\n  /**\n   * Emit the errors if there are any.\n   * @return true if an error is emitted, false otherwise \n   */\n  emitError(IME: IndexedMetaError, errorChannel: ObsValueReset) {\n    if (IME && IME.tableData.rows.length && errorChannel) {\n      this.s.OS.put(errorChannel, IME)\n      return true\n    }\n    return false\n  }\n}\n\n\n/**\n  //======================================\n  // Check that the key headers match\n  //======================================\n  // DESCRIPTION\n  //========================================\n  // We do this by producing a cross section\n  // set of keys and then checking that keyset\n  // across all the tables.\n  //========================================\n  // EXAMPLE\n  //========================================\n  // Table 1 has the key SKU\n  // Table 2 has the key LOCATION\n  // The cross section keyset is [LOCATION, SKU]\n  // Table 1 is missing LOCATION\n  // Table 2 is missing SKU\n  //========================================\n\n  checkUniqueSelectedHeaders(\n    dataMap: Map<number, CsvSelectionData>,\n    errorChannel: ObsValueReset): boolean {\n    const IME: IndexedMetaError = validateSelectedHeadersUnique(dataMap)\n    return this.emitError(IME, errorChannel)\n  }\n */","import { Component, OnInit, AfterViewInit, ViewChild, Input } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { MatTable } from '@angular/material/table';\nimport { SelectionModel } from \"@angular/cdk/collections\";\nimport { MatTableDataSource } from '@angular/material/table';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { CsvHeaderMetaRow, CsvSelectionData, CSV_HEADER_META_ROW_COLUMNS } from '../../../models';\nimport { StateService } from '../../../services/state.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-csv-header-table',\n  templateUrl: './csv-header-table.component.html',\n  styleUrls: ['./csv-header-table.component.scss']\n})\nexport class CsvHeaderTableComponent implements OnInit, AfterViewInit {\n\n  /**\n   * It's possible to rerender rows\n   * by calling table.renderRows().  We do it\n   * by posting to the StateService, causing\n   * notification to this component that the \n   * rows have changed via a drag drop event or \n   * by loading data.\n   * \n   * When we do dataSource.data = rows, MatTable\n   * automatically detects this and rerenders.\n   * \n   */\n\n  /**\n   * We trigger table rerendering by emitting \n   * on the `this.s.OS.S.CSV_DATA` channel whenever \n   * there is a change in the order of the headers,\n   * so technically we don't need the `table` property. \n   */\n  @ViewChild(MatTable, { static: false }) table: MatTable<CsvHeaderMetaRow>\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n\n  /**\n   * The index of this component.  The index is \n   * created by the factory We added the `@Input` \n   * annotation for declarative component testing purposes\n   */\n  @Input()\n  index = 0\n\n  drop(event: CdkDragDrop<CsvHeaderMetaRow[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex);\n\n      //=========================================\n      // Retreive the CsvSelectionData\n      // so that we an update the rows \n      // property.\n      //=========================================\n\n      const map: Map<number, CsvSelectionData> =\n        this.s.csvDataMapSnapshot()\n\n      const csvData: CsvSelectionData =\n        map.get(this.index)\n\n      //=========================================\n      // Set the rows on csvData to the \n      //newly reordered rows\n      //=========================================\n      csvData.rows = [...event.container.data]\n      //=========================================\n      // Trigger rerendering of the table\n      //=========================================\n      this.s.OS.put(this.s.OS.S.CSV_DATA_MAP, map)\n      //============================\n      //This is taken care of by emitting the data\n      //============================\n      //this.table.renderRows();\n      //==============================\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex);\n    }\n  }\n\n  /** CDK SelectionModel instance */\n  selection = new SelectionModel<CsvHeaderMetaRow>(true, []);\n\n  /** \n   * Whether the number of selected \n   * elements matches the total number of rows. \n   */\n  isAllSelected() {\n    const numRows = this.dataSource.data.length;\n    return this.selection.selected.length === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear()\n      this.dataSource.data.forEach(\n        row => {\n          row.INCLUDE = false\n        })\n    }\n    else {\n      this.dataSource.data.forEach(\n        row => {\n          this.selection.select(row)\n          row.INCLUDE = true\n        })\n    }\n  }\n\n  HEADER_COLUMN = 'HEADER'\n\n  COLUMNS = CSV_HEADER_META_ROW_COLUMNS\n\n  dataSource: MatTableDataSource<CsvHeaderMetaRow> =\n    new MatTableDataSource<CsvHeaderMetaRow>([])\n\n  constructor(private s: StateService) { }\n\n    ngOnInit() {\n    this.s.OS.S.CSV_DATA_MAP.obs.pipe(untilDestroyed(this)).\n      subscribe((map: Map<number, CsvSelectionData>) => {\n        if (map) {\n          const CSD: CsvSelectionData = map.get(this.index)\n          if (CSD) {\n            const rows: CsvHeaderMetaRow[] = CSD.rows\n            this.dataSource.data = rows\n          }\n          else {\n            this.dataSource.data = []\n          }\n        }\n      })\n    //=============================================\n    // Subscribe to selection changes:\n    // this.selection.changed.subscribe(v => console.log(v))\n    //=============================================\n  }\n\n  ngAfterViewInit() {\n    //=============================================\n    // We don't use sorting\n    //=============================================\n    // this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n}","<div style=\"max-width: 40rem;\">\n    <mat-table class=\"mat-elevation-z8\"\n        style=\"min-width:22rem;\"\n        [dataSource]=\"dataSource\"\n        (cdkDropListDropped)=\"drop($event)\"\n        [cdkDropListData]=\"dataSource.data\"\n        cdkDropList\n        matSort>\n        <!-- Checkbox Column -->\n        <ng-container matColumnDef=\"SELECT\">\n            <mat-header-cell mat-header-cell\n                style=\"justify-content: center; max-width: 6rem;\"\n                *matHeaderCellDef>\n                <mat-checkbox (change)=\"$event && masterToggle()\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n                </mat-checkbox>\n            </mat-header-cell>\n\n            <mat-cell mat-cell\n                style=\"justify-content: center; max-width: 6rem; \"\n                *matCellDef=\"let row\">\n                <mat-checkbox [(ngModel)]=\"row.INCLUDE\"\n                    (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event && selection.toggle(row)\"\n                    [checked]=\"selection.isSelected(row)\">\n                </mat-checkbox>\n            </mat-cell>\n        </ng-container>\n\n        <ng-container [matColumnDef]=\"HEADER_COLUMN\">\n\n            <mat-header-cell *matHeaderCellDef\n                style=\"max-width: 14rem;\"\n                mat-sort-header>\n                {{HEADER_COLUMN}}\n            </mat-header-cell>\n\n            <mat-cell *matCellDef=\"let row;\"\n                style=\"max-width: 14rem;\">\n                {{row[HEADER_COLUMN]}}\n            </mat-cell>\n        </ng-container>\n\n        <mat-header-row *matHeaderRowDef=\"COLUMNS\">\n        </mat-header-row>\n\n        <mat-row *matRowDef=\"let row; columns: COLUMNS\"\n            cdkDrag\n            [cdkDragData]=\"row\"></mat-row>\n    </mat-table>\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 15, 20]\"\n        [pageSize]=\"5\"\n        showFirstLastButtons></mat-paginator>\n</div>","import { Component } from '@angular/core';\nimport { AuthService, AuthStateService } from '@fireflysemantics/amplify';\nimport { ROUTES } from './app-routing.module'\nimport { StateService } from './services/state.service';\nimport { AnalyticsService } from '@fireflysemantics/analytics';\nimport { LocalStorageTOSService } from '@fireflysemantics/material';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(\n    public s: StateService, \n    public a: AuthService, \n    public as:AuthStateService, \n    public localStorageTOSService:LocalStorageTOSService,\n    private analytics: AnalyticsService) { \n      const tosAccepted = localStorageTOSService.OS.snapshot(localStorageTOSService.OS.S.IS_TOS_ACCEPTED);\n    }\n  public ROUTES = ROUTES\n}","\n<!---->\n<app-application></app-application>\n\n<mat-toolbar>\n    <button mat-button\n        [routerLink]=\"[ROUTES.APPLICATION]\"\n        style=\"padding: 1rem;\">\n        <mat-icon style=\"width: 42px; height:42px; font-size: 42px\">view_column</mat-icon>\n        &nbsp; &nbsp; CSV\n    </button>\n    <fs-toolbar-menu [isTOSAccepted]=\"this.localStorageTOSService.isTOSAccepted$ | async\"\n    documentationURL=\"https://csv-help.fireflysemantics.com/\"\n\n        [isAuthenticated]=\"this.as.isAuthenticated$ | async\"\n        (onLogout)=\"this.a.signOut()\"\n        (onLogin)=\"this.a.signInWithGoogle()\"></fs-toolbar-menu>\n</mat-toolbar>\n<main style=\"margin:2rem\"\n    [ngClass]=\"{'CenterContent': !(s.isApplicationShowing$ | async)}\">\n    <router-outlet></router-outlet>\n</main>","import { mapObject } from '@fireflysemantics/collections'\nimport { TableData } from '@fireflysemantics/cdk'\nimport { CsvFile } from '@fireflysemantics/csv'\nimport { CsvHeaderMetaRow } from './CsvHeaderMetaRow'\n\nexport class CsvSelectionData {\n    /**\n     * What we are mapping the CSV File \n     * data to via selecting headers.\n     */\n    public mappedData: TableData\n\n    /**\n     * The CSV entities mapped by their key.\n     */\n    public keyMap: Map<string, any> = new Map()\n\n    /**\n     * We drop in instances of `CsvHeaderMetaRow`\n     * after having read in the CSV file.  We grab\n     * the headers from that and create the \n     * `CsvHeaderMetaRow` instances.\n     */\n    constructor(\n        public meta: CsvFile,\n        public rows: CsvHeaderMetaRow[],\n        public tableData: TableData\n    ) { }\n\n\n    public getSelectedHeaders(): string[] {\n        return this.rows.filter(r => r.INCLUDE).\n            map(r => r.HEADER.trim())\n    }\n\n    public getHeaders() {\n        return this.rows.map(r => r.HEADER.trim())\n    }\n\n    public isKeyIncludedInHeaders(key: string): boolean {\n        return this.getHeaders().includes(key)\n    }\n\n    /**\n     * This maps the CSV data\n     * to the headers fields selected,\n     * \n     * Once complete the mappedData:TableData\n     * fields are initialized.\n     * \n     * These include:\n     * mappedData.rows\n     * mappedData.headers\n     * \n     * The `mappedData.rows` objects \n     * can now be assembled with the other\n     * tables or saved if there is just one table.\n     * \n     * Note that for assembly to occur keys should be \n     * selected.  We do support the use case of just saving \n     * columns.\n     * \n     * This is only when operating on a single table.\n     */\n    mapData() {\n        //==========================================\n        // Support the use case where\n        // we only have a single table and we \n        // want to map columns only.\n        //==========================================\n        this.mappedData = new TableData()\n        if (this.getSelectedHeaders().length) {\n            const rows = []\n            this.mappedData.headers = this.getSelectedHeaders()\n            this.tableData.rows.forEach(v => {\n                rows.push(mapObject(v, this.getSelectedHeaders()))\n            })\n            this.mappedData.rows = rows\n        }\n        else {\n            this.mappedData.rows = []\n        }\n    }\n\n    /**\n     * Creates the key to entity map\n     * of the CSV data rows.\n     */\n    public indexAndMapData(keyHeader: string) {\n        if (keyHeader) {\n            this.keyMap = new Map()\n            this.tableData.rows.forEach(r => {\n                this.keyMap.set(r[keyHeader], mapObject(r, this.getSelectedHeaders()))\n            })\n        }\n    }\n}","export * from '../services/validation/rowConverter'\nexport * from './error'\nexport * from './CsvSelectionData'\nexport * from './CsvSelectionDataAssemblyContainer'\nexport * from './CsvHeaderMetaRow'\nexport * from './localstorage'","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '@fireflysemantics/amplify';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(public as:AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<fs-tos-login (onSignIn)=\"this.as.signInWithGoogle()\"></fs-tos-login>","import { ComponentDataService } from '../../services/component-data.service'\nimport { Component, OnInit, ViewChild, ViewContainerRef, AfterViewInit } from '@angular/core'\nimport { AuthService } from '@fireflysemantics/amplify';\n\n@Component({\n  selector: 'app-application',\n  templateUrl: './application.component.html',\n  styleUrls: ['./application.component.scss']\n})\nexport class ApplicationComponent implements OnInit, AfterViewInit {\n\n  //==================================\n  // The component container\n  //==================================\n  @ViewChild(\"vcr\", { read: ViewContainerRef })\n  VCR: ViewContainerRef;\n\n  ngAfterViewInit() {\n    this.cds.VCR = this.VCR\n  }\n\n  constructor(public as: AuthService,\n    private cds: ComponentDataService) { }\n\n  createComponent() {\n    this.cds.createComponent()\n  }\n\n  ngOnDestroy() {\n    this.cds.reset()\n  }\n\n  ngOnInit(): void { }\n\n  clearContainer() {\n    this.VCR.clear();\n  }\n\n  logout() {\n    this.as.signOut()\n  }\n}","<button (click)=\"createComponent()\"\n    mat-icon-button\n    aria-label=\"Load CSV Dialog\">\n    <mat-icon>add_box</mat-icon>\n</button>\n\n<div class=\"CsvHeaderSelectionContainer\">\n    <div #vcr>\n    </div>\n</div>\n\n<app-csv-composite></app-csv-composite>","/**\n * The columns headers for the table\n * that renders CsvHeaderMetaRow instances. \n */\nexport const CSV_HEADER_META_ROW_COLUMNS = ['SELECT', 'HEADER']\n\n\n/**\n * Instances of this class are rendered by the \n * table contained in the `CsvHeaderTableComponent`.\n * \n * @example\n * [{ INCLUDE: false, HEADER: 'salesPrice'},\n *  { INCLUDE: true, HEADER: 'quantity'}]\n */\nexport class CsvHeaderMetaRow {\n    public INCLUDE: boolean = false\n    constructor(public HEADER?: string) { }\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './components/home/home.component';\n\nimport { MaterialBaseModule } from '@fireflysemantics/material-base-module'\nimport { CsvLoadModule } from '@fireflysemantics/csv-components'\nimport { DataTableComponentModule, ErrorComponentModule, TOSLoginModule, ToolbarMenuModule } from '@fireflysemantics/material'\nimport { AssetsModule } from '@fireflysemantics/assets';\nimport { ApplicationComponent } from './components/application/application.component';\nimport { CsvHeaderSelectionComponent } from './components/csv-header-selection/csv-header-selection.component';\nimport { CsvHeaderTableComponent } from './components/csv-header-selection/csv-header-table/csv-header-table.component';\nimport { CsvProcessComponent } from './components/csv-process/csv-process.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ScullyLibModule } from '@scullyio/ng-lib';\n\nconst FS_MODULES = [ DataTableComponentModule, ErrorComponentModule, CsvLoadModule, ToolbarMenuModule, MaterialBaseModule, TOSLoginModule, AssetsModule]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    ApplicationComponent,\n    CsvHeaderSelectionComponent,\n    CsvHeaderTableComponent,\n    CsvProcessComponent,\n    LoginComponent\n  ],\n  imports: [\n    DragDropModule, \n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialBaseModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ...FS_MODULES,\n    ScullyLibModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}","export const LOCAL_STORAGE_KEYS = {\n    APPLICATION_CONFIG: 'APPLICATION_CONFIG'\n}\n","import { Injectable, ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory } from '@angular/core';\nimport { CsvHeaderSelectionComponent } from '../components/csv-header-selection/csv-header-selection.component';\nimport { deleteAndDecrement } from '@fireflysemantics/collections'\nimport { StateService } from './state.service';\nimport { CsvSelectionData } from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentDataService {\n\n  //==================================\n  // The index that can be assigned\n  // to a newly created component\n  //==================================\n\n  index: number = 0\n\n  //==================================\n  // Map of index to ComponentRef instance\n  //==================================\n  map: Map<number, ComponentRef<CsvHeaderSelectionComponent>> = new Map()\n\n  VCR: ViewContainerRef;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private s: StateService) { }\n\n  /**\n   * Creates a `CsvHeaderSelectionComponent`.\n   * Each time we create a component we increment\n   * the `index` used to store the component\n   * in the map.\n   * \n   * Note that if we delete a component, we deleteAndDecrement\n   * from the map correspondingly.\n   */\n  createComponent() {\n    const factory: ComponentFactory<CsvHeaderSelectionComponent> =\n      this.resolver.resolveComponentFactory(CsvHeaderSelectionComponent);\n    const componentRef: ComponentRef<CsvHeaderSelectionComponent> = this.VCR.createComponent(factory);\n\n    componentRef.instance.index = this.index;\n    this.map.set(this.index, componentRef)\n    this.index++\n  }\n\n  destroyComponent(index: number) {\n\n    if (index==0) {\n      this.reset()\n      return;\n    }\n\n    const componentRef: ComponentRef<CsvHeaderSelectionComponent> = this.map.get(index)\n    componentRef.destroy()\n    deleteAndDecrement(this.map, index)\n    //====================================\n    // Remap the component indexes also\n    //====================================\n    this.map.forEach((v, k) => {\n      v.instance.index = k\n    })\n    const dataMap: Map<number, CsvSelectionData> = this.s.OS.snapshot(this.s.OS.S.CSV_DATA_MAP)\n\n    //====================================\n    // Update the data map.\n    // We check if it is created\n    // because components can be displayed\n    // but they may not have loaded data\n    //====================================\n    if (dataMap && dataMap.size) {\n      if (dataMap.get(index)) {\n        deleteAndDecrement(dataMap, index)\n      }\n    }\n\n    //====================================\n    // Decrement the index because we \n    // removed a component\n    //====================================\n    this.index--\n    //====================================\n    // Update events that depend on observing\n    // changes to the dataMap\n    //====================================\n    this.s.OS.put(this.s.OS.S.CSV_DATA_MAP, dataMap)\n  }\n\n  /**\n   * Destroy all table header container components\n   * and clear the data map.\n   * \n   * This is called by the application component\n   * in the ngOnDestroy method.\n   */\n  reset() {\n    this.map &&\n      this.map.forEach((ref: ComponentRef<CsvHeaderSelectionComponent>) => {\n        ref && ref.destroy();\n      });\n    this.map && this.map.clear()\n    const dataMap: Map<number, CsvSelectionData> =\n      this.s.OS.snapshot(this.s.OS.S.CSV_DATA_MAP)\n    dataMap && dataMap.clear()\n  }\n}","import { CsvSelectionData } from '../../models'\n/**\n * Validate that the key headers match across all the tables.\n * \n * @return true if there is only one table or all the tables have the primary key\n */\nexport function validateAllTablesContainPrimaryKeyHeader(dataMap: Map<number, CsvSelectionData>, key:string): boolean {\n\n    //====================================\n    // Only process when there are at least\n    // Two tables.\n    //====================================\n    if (dataMap.size == 1) {\n        return true\n    }\n    if ( dataMap.size > 1) {\n        let valid = true;\n        dataMap.forEach(CSD=> {\n            if (!CSD.isKeyIncludedInHeaders(key)) {\n                valid = false;\n            }\n        })\n        return valid;\n    }\n    return false;\n}","import { Injectable } from '@angular/core';\nimport { StateService } from '../state.service';\nimport { CsvSelectionData } from '../../models';\nimport { ValidationService } from '../validation/validation.service';\nimport { processSingleTable } from './processSingleTable'\nimport { processMultipleTables } from './processMultipleTables'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataProcessService {\n\n  constructor(\n    private s: StateService,\n    private v: ValidationService) { }\n\n  /**\n   * Processes the CSV Data.  \n   * @return true, then there were no validation errors, false otherwise.\n   */\n  process(): boolean {\n\n    //===================================\n    // Set the result to null such that\n    // the table component is destroyed \n    // and recreated by the ngIf statement.\n    //\n    // Also the save enabled state is reset.\n    //===================================\n\n    this.s.resetResultState()\n    this.s.resetErrorState()\n\n    //========================================\n    // Retrieve the selection data\n    //========================================\n    const dataMap: Map<number, CsvSelectionData> = this.s.csvDataMapSnapshot()\n\n    if (dataMap.size == 1) {\n      return processSingleTable(dataMap, this.s, this.v)\n    }\n    return processMultipleTables(dataMap, this.s, this.v)\n  }\n}","import { RowKeyError, undefinedRowKeys } from '@fireflysemantics/error'\nimport { FileRowKeyError, CsvSelectionData, rowConverter, IndexedMetaError, FILE_ROW_KEY_ERROR_COLUMNS, ERROR_TYPE_KEYS } from '../../models'\nimport { ValidationConfiguration } from './model'\n\n/**\n * Validate the key fields in data set are defined.\n * \n * Values including '', '   ', null or undefined are flagged.\n * \n * This operation only completes if there are\n * CSV rows to operate on and selected keys.\n * \n * @param dataMap The map containing the CSV Entities\n * @param errorChannel The error channel\n * @return The IME if there are errors otherwise null \n * \n  //========================================\n  // Validate the key fields for each table\n  //========================================\n  // EXAMPLE\n  //========================================\n  // Suppose Table 1 has SKU marked as a key.\n  // Row 3 has undefined or null for SKU\n  // Row 3 now has a validation error created \n  // for it.\n  //========================================\n */\n\nexport function validateDefinedKeyValues(dataMap: Map<number, CsvSelectionData>, config: ValidationConfiguration): IndexedMetaError | null {\n\n    const keyHeader = config.keyHeader\n\n    const IME = new IndexedMetaError()\n\n    IME.tableData.headers = FILE_ROW_KEY_ERROR_COLUMNS\n\n    IME.type = ERROR_TYPE_KEYS.UNDEFINED_KEY_VALUE_ERROR\n\n    dataMap.forEach((CSD, k) => {\n\n        const FRKES: FileRowKeyError[] = []\n\n        if (keyHeader && CSD.tableData.rows.length) {\n\n            const RKES: RowKeyError[] = undefinedRowKeys(\n                CSD.tableData.rows,\n                [keyHeader],\n                rowConverter)\n\n            RKES.forEach(e => {\n                const FRKE = new FileRowKeyError(e.FIELD, e.ROW, CSD.meta.name)\n                FRKES.push(FRKE)\n            })\n\n            IME.indexErrors.set(k, FRKES)\n            IME.indexedMeta.set(k, CSD.meta)\n            IME.tableData.rows = [...IME.tableData.rows, ...FRKES]\n        }\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","import { IndexedMetaError, CsvSelectionData } from '../../models'\nimport { duplicateCompoundKeys } from '@fireflysemantics/collections'\nimport { FileRowDuplicatesError, FILE_ROW_DUPLICATES_ERROR_COLUMNS, ERROR_TYPE_KEYS } from '../../models/error'\nimport { rowConverter } from './rowConverter'\n\n/**\n * This will check whether the \n * key is unique across all records \n * in each table.\n * \n * @param dataMap The map of CsvSelectionData instances\n * @return An `IndexedMetaError` instance or null if there are no errors\n */\nexport function validateUniqueKeyValues(\n    dataMap: Map<number, CsvSelectionData>, config: any):\n    IndexedMetaError | null {\n\n    const keyHeader = config.keyHeader;\n\n    const IME = new IndexedMetaError()\n    IME.type = ERROR_TYPE_KEYS.DUPLICATE_KEY_ERROR\n    IME.tableData.headers = FILE_ROW_DUPLICATES_ERROR_COLUMNS\n\n    dataMap.forEach((CSD, k) => {\n        if (keyHeader) {\n\n            const duplicates = duplicateCompoundKeys(\n                CSD.tableData.rows,\n                [keyHeader])\n\n            const duplicateEntities: FileRowDuplicatesError[] =\n                duplicates.map(d => {\n                    const rowString = rowConverter(d)\n                    const duplicateEntity = new FileRowDuplicatesError(\n                        rowString,\n                        CSD.meta.name)\n                    return duplicateEntity\n                })\n\n            IME.indexErrors.set(k, duplicateEntities)\n            IME.indexedMeta.set(k, CSD.meta)\n            IME.tableData.rows = [...IME.tableData.rows, ...duplicateEntities]\n        }\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","/**\n * Convert the object key value pairs to a string.\n * \n * We are using a custom converters to format\n * objects strings where the key is undefined, null,\n * or missing.\n * \n * @param o \n * @return The key value pair string\n */\nexport function rowConverter(o: any): string {\n    const keyValuePairs: string[] = []\n    const keys = Object.keys(o)\n    keys.forEach(k => {\n        const keyValue = `[ ${k} = ${o[k]} ]`\n        keyValuePairs.push(keyValue)\n    })\n    const str: string = keyValuePairs.join(``)\n    return str\n}\n","import { TableData } from \"@fireflysemantics/cdk\"\nimport { CsvSelectionData } from \"./CsvSelectionData\"\n\n/**\n * The `CsvSelectionDataAssemblyContainer`\n * should be used when there is more than one\n * table.\n * \n * This calls createAssemblyHeaders (All the headers contained\n * in the result table) ) in the constructor\n * so that they will be availble on `assembly`. \n * \n * Note that `CsvSelectionData.refreshState()`\n * should be called on each instance contained\n * in the `dataMap` before the `dataMap` is passed in.\n */\nexport class CsvSelectionDataAssemblyContainer {\n\n    keys: string[]\n    assembly: TableData\n\n    constructor(public dataMap: Map<number, CsvSelectionData>) {\n\n        this.assembly = new TableData()\n\n        if (dataMap && dataMap.size) {\n\n            //=====================================\n            // Keys come from the first\n            // CsvSelectionData instance on the map\n            //\n            // The compound keys should be the same\n            // across the CsvSelectionData instances.\n            //=====================================\n\n            this.keys = [...this.dataMap.get(0).keyMap.keys()]\n\n            this.createAssemblyHeaders()\n            if (this.hasAssemblyHeaders()) {\n                this.assembly.rows = this.createAssemblyRows()\n            }\n        }\n    }\n\n    createAssemblyRows() {\n        const assemblyRows = []\n        this.keys.forEach(k => {\n            let assemblyObject = {}\n            this.dataMap.forEach(v => {\n                console.log(`The selected headers o is ${v.getSelectedHeaders()}`)\n\n                if (v.getSelectedHeaders().length) {\n                    const o = v.keyMap.get(k)\n                    console.log(`The o is ${JSON.stringify(o)}`)\n                    assemblyObject = {\n                        ...assemblyObject,\n                        ...o\n                    }\n                }\n            })\n            assemblyRows.push(assemblyObject)\n        })\n        return assemblyRows\n    }\n\n    /**\n     * Creates the assembly headers or \n     * the headers that were welected to\n     * form the final table.\n     * \n     * @returns The array of headers\n     */\n    createAssemblyHeaders() {\n        let headers = []\n        this.dataMap && this.dataMap.forEach(v => {\n            headers = [...headers, ...v.getSelectedHeaders()]\n        })\n        this.assembly.headers = headers\n        return headers\n    }\n\n    /**\n     * This method can be called to \n     * check whether assembly headers exists.\n     * \n     * If they don't no assembly is created so \n     * the result does not need to be emitted.\n     */\n    hasAssemblyHeaders() {\n        return !!this.assembly.headers.length\n    }\n}","import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { OStore, ObsValueReset, OStoreStart } from '@fireflysemantics/slice'\nimport { APPLICATION_NAVIGATION } from '@fireflysemantics/constants'\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CsvSelectionData } from '../models';\nimport { validateAllTablesContainPrimaryKeyHeader } from './validation/validateAllTablesContainPrimaryKeyHeader';\n\nexport const OSK: OStoreStart = {\n\n  //=================================\n  // CONFIGURATION\n  //=================================\n\n  APPLICATION_CONFIG: { value: null },\n\n  //=================================\n  // SELECTED KEY\n  //=================================\n  SELECTED_KEY: { value: null },\n\n  //=================================\n  // DATA MANAGEMENT\n  //=================================\n  IS_CSV_DATA_LOADING: { value: false },\n  IS_CSV_DATA_BATCH_RUNNING: { value: false },\n  ON_CSV_DATA_BATCH_UPDATE: { value: 0 },\n  CSV_DATA_MAP: { value: null },\n  PROCESS_RESULT: { value: null },\n\n  //=================================\n  // ERROR MANAGEMENT\n  //=================================\n  LOAD_AND_PROCESSING_ERRORS: { value: null },\n\n  //=================================\n  // UI EVENTS\n  //=================================\n  KEY_HEADER_CHECKBOX_TOGGLE_EVENT: { value: false },\n}\n\nexport interface OSKI {\n\n  //=================================\n  // CONFIGURATION\n  //=================================\n  APPLICATION_CONFIG: ObsValueReset\n\n  //=================================\n  // SELECTED KEY\n  //=================================\n  SELECTED_KEY: ObsValueReset,\n\n  //=================================\n  // DATA MANAGEMENT\n  //=================================\n  IS_CSV_DATA_BATCH_RUNNING: ObsValueReset\n  ON_CSV_DATA_BATCH_UPDATE: ObsValueReset\n  IS_CSV_DATA_LOADING: ObsValueReset\n  CSV_DATA_MAP: ObsValueReset,\n  PROCESS_RESULT: ObsValueReset,\n\n  //=================================\n  // ERROR MANAGEMENT\n  //=================================\n  LOAD_AND_PROCESSING_ERRORS: ObsValueReset\n\n  //=================================\n  // UI EVENTS\n  //=================================\n  KEY_HEADER_CHECKBOX_TOGGLE_EVENT: ObsValueReset\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n\n  APPLICATION_ROUTE = `/${APPLICATION_NAVIGATION.APPLICATION.path}`\n\n  constructor(private r: Router) { }\n\n  OS = new OStore<OSKI>(OSK)\n\n  //=================================\n  //=================================\n  // ALIASES\n  //=================================\n  //=================================\n  public selectedKey$: Observable<string> = this.OS.S.SELECTED_KEY.obs\n  public csvDataMap$: Observable<Map<number, CsvSelectionData>> = this.OS.S.CSV_DATA_MAP.obs\n\n  //=================================\n  //=================================\n  // DERIVED STATE\n  //=================================\n  //=================================\n\n  //---------------------------------\n  // APPLICATION SHOWING\n  //---------------------------------\n  public isApplicationShowing$: Observable<boolean> = this.r.events.pipe(\n    filter(event => event instanceof NavigationEnd),\n    map((event: NavigationEnd) => event.url == this.APPLICATION_ROUTE))\n\n  //---------------------------------\n  // RESULT READY\n  //---------------------------------\n  public isResultReady$: Observable<boolean> = this.OS.S.PROCESS_RESULT.obs.pipe(\n    map(r => {\n      return !!r\n    }))\n\n  //---------------------------------\n  // PROCESS BUTTON ENABLED\n  //---------------------------------\n  public processButtonEnabled$: Observable<boolean> = combineLatest([\n    this.selectedKey$,\n    this.csvDataMap$]).pipe(map((arr) => {\n      const selectedKey = arr[0]\n      const dataMap = arr[1]\n\n      if (dataMap && dataMap.size == 1) {\n        return true\n      }\n\n      if (dataMap && dataMap.size > 1 && !selectedKey) {\n        return false;\n      }\n      if (dataMap && dataMap.size > 1) {\n        return validateAllTablesContainPrimaryKeyHeader(dataMap, selectedKey)\n      }\n      return false;\n    }))\n\n  //---------------------------------\n  // SAVE BUTTON ENABLED\n  //---------------------------------\n  public saveButtonEnabled$: Observable<boolean> = this.OS.S.PROCESS_RESULT.obs.pipe(\n    map(r => {\n      return !!r\n    }))\n\n  //---------------------------------\n  // LOAD AND PROCESSING ERORS\n  //---------------------------------\n  public hasLoadAndProcessingErrorOccured$: Observable<boolean> = this.OS.S.LOAD_AND_PROCESSING_ERRORS.obs.pipe(\n    map(r => {\n      return !!r\n    }))\n\n  //---------------------------------\n  // IS THE KEY SLEECTED\n  //---------------------------------\n  public isKeySelected$(): Observable<boolean> {\n    return this.OS.S.SELECTED_KEY.obs.pipe(map(v => !!v))\n  }\n\n\n  //=================================\n  //=================================\n  // UTILITY METHODS\n  //=================================\n  //=================================\n\n  public resetResultState() {\n    this.OS.put(\n      this.OS.S.PROCESS_RESULT,\n      null)\n  }\n\n  public resetErrorState() {\n    this.OS.put(\n      this.OS.S.LOAD_AND_PROCESSING_ERRORS,\n      null)\n  }\n\n  public csvDataMapSnapshot(): Map<number, CsvSelectionData> {\n    return this.OS.snapshot(this.OS.S.CSV_DATA_MAP)\n  }\n\n  public keySnapshot(): string {\n    return this.OS.snapshot(this.OS.S.SELECTED_KEY)\n  }\n\n  public csvSelectionDataSnapshot(index: number): CsvSelectionData | null {\n    const csvDataMap = this.csvDataMapSnapshot()\n    if (csvDataMap) {\n      return csvDataMap.get(index)\n    }\n  }\n}","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:485bc07d-2ee3-4e34-8c3a-6e73b6db22fc\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_z5PA9UXM6\",\n    \"aws_user_pools_web_client_id\": \"u5e8quees6mvrm241n3ng8j6m\",\n    \"oauth\": {\n        \"domain\": \"csvfd66a523-fd66a523-production.auth.us-east-1.amazoncognito.com\",\n        \"scope\": [\n            \"phone\",\n            \"email\",\n            \"openid\",\n            \"profile\",\n            \"aws.cognito.signin.user.admin\"\n        ],\n        \"redirectSignIn\": \"https://csv.fireflysemantics.com/\",\n        \"redirectSignOut\": \"https://csv.fireflysemantics.com/\",\n        \"responseType\": \"code\"\n    },\n    \"federationTarget\": \"COGNITO_USER_POOLS\"\n};\n\nexport default awsmobile;\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DataProcessService } from '../../services/process/data-process.service';\nimport { CsvService } from '../../services/csv.service';\nimport { TableData } from '@fireflysemantics/cdk';\nimport { StateService } from '../../services/state.service';\nimport { ERROR_TYPES, IndexedMetaError } from '../../models/error'\nimport { ErrorTypes } from '@fireflysemantics/material';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { of } from 'rxjs'\n\n@UntilDestroy()\n@Component({\n  selector: 'app-csv-composite',\n  templateUrl: './csv-process.component.html',\n  styleUrls: ['./csv-process.component.scss']\n})\nexport class CsvProcessComponent implements OnInit {\n\n  public resultData$: Observable<TableData>\n  public errorData$: Observable<TableData>\n\n  public errorTypes: ErrorTypes = ERROR_TYPES\n  public errorKey$: Observable<string> = of(null)\n\n  constructor(\n    public s: StateService,\n    private c: DataProcessService,\n    public csv: CsvService) { }\n\n  ngOnInit(): void {\n    this.resultData$ = this.s.OS.S.PROCESS_RESULT.obs\n  }\n\n  ngAfterViewInit(): void {\n    this.s.OS.S.LOAD_AND_PROCESSING_ERRORS.obs.pipe(\n      untilDestroyed(this)).\n      subscribe(\n        (IME: IndexedMetaError) => {\n          if (IME) {\n            this.errorKey$ = of(IME.type)\n            this.errorData$ = of(IME.tableData)\n          }\n          else {\n            //=========================================\n            //We reset the errorKey$ to null such that\n            //the error component does not display\n            //=========================================\n            this.errorKey$ = of(null)\n          }\n        })\n  }\n\n  process() {\n    this.c.process()\n  }\n}","<button (click)=\"process()\"\n    style=\"margin-bottom: 1rem;\"\n    mat-stroked-button\n    color=\"accent\"\n    [disabled]=\"!(s.processButtonEnabled$ | async)\">\n    <mat-icon>api</mat-icon>\n    PROCESS\n</button>\n\n<button class=\"Button\"\n    mat-stroked-button\n    color=\"accent\"\n    (click)=\"csv.saveCSV()\"\n    [disabled]=\"!(s.saveButtonEnabled$ | async)\">\n    <mat-icon>save</mat-icon>\n    SAVE\n</button>\n\n<fs-error [error$]=\"errorKey$\"\n    [errorTypes]=\"errorTypes\"\n    [tableData$]=\"errorData$\"></fs-error>\n\n<div *ngIf=\"s.isResultReady$ | async\">\n    <h3>Result</h3>\n    <fs-data-table [tableData$]=\"resultData$\"></fs-data-table>\n</div>","import { Injectable } from '@angular/core';\nimport { StateService } from '../services/state.service';\nimport { CSV_PARSE_ERROR_COLUMNS, save, CsvFile } from '@fireflysemantics/csv'\nimport { TableData } from '@fireflysemantics/cdk'\nimport { ParseResult, ParseError } from 'papaparse';\nimport { CsvHeaderMetaRow, CsvSelectionData, IndexedMetaError, ERROR_TYPE_KEYS } from '../models';\nimport { nanoid } from 'nanoid'\nimport { trimObjectValues } from '@fireflysemantics/collections'\n\n//=====================================\n//Test parser errors locally\n//=====================================\n//import { parserError } from 'CSV-TEST-FILES/test-errors';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsvService {\n\n  csvDataMap: Map<number, CsvSelectionData> = new Map()\n\n  constructor(private s: StateService) { }\n\n  saveCSV() {\n    const fileName = `csv-${nanoid()}.csv`\n    const result: TableData =\n      this.s.OS.snapshot(this.s.OS.S.PROCESS_RESULT)\n    save(fileName, result.rows)\n  }\n\n  loadCSV(\n    csvFile: CsvFile): ParseResult<any> {\n    const index = csvFile.meta.index\n    const worker = new Worker('./csv.worker', { type: 'module' })\n    let parseResult: ParseResult<any>\n\n    //====================================\n    // Reset the error state\n    // by emitting null\n    //====================================\n    this.s.resetErrorState()\n\n    worker.postMessage(csvFile.data)\n    worker.onmessage = ({ data }: { data: ParseResult<any> }) => {\n      parseResult = data\n\n\n      const parseErrors: ParseError[] = data.errors\n\n      //====================================\n      // Check for parser errors\n      //====================================\n      if (parseErrors.length) {\n        //====================================\n        // Set the index to null in case\n        // we have already loaded data \n        // successfully\n        //====================================\n        this.csvDataMap.set(index, null)\n\n        //====================================\n        // Emit the datamap so that we \n        // can reset the table in case \n        // there's something in it.\n        //====================================\n        this.s.OS.put(\n          this.s.OS.S.CSV_DATA_MAP,\n          this.csvDataMap)\n\n        const IME: IndexedMetaError = new IndexedMetaError()\n        IME.type = ERROR_TYPE_KEYS.PARSER_ERROR\n        IME.tableData.rows = parseErrors\n        IME.tableData.headers = CSV_PARSE_ERROR_COLUMNS\n        this.s.OS.put(\n          this.s.OS.S.LOAD_AND_PROCESSING_ERRORS,\n          IME)\n        return data\n      }\n\n      const headers: string[] = data.meta.fields\n      const csvHeaderMetaRows: CsvHeaderMetaRow[] = []\n\n      headers.forEach(h => {\n        csvHeaderMetaRows.push(new CsvHeaderMetaRow(h))\n      })\n\n      csvFile.rowCount = data.data.length\n\n      //====================================\n      // Trim string values\n      //====================================\n      data.data.forEach((entity: any) => {\n        trimObjectValues(entity)\n      })\n\n      const csvData = new CsvSelectionData(\n        csvFile,\n        csvHeaderMetaRows,\n        new TableData(data.data, headers))\n\n      this.csvDataMap.set(index, csvData)\n\n      this.s.resetErrorState()\n\n      this.s.OS.put(\n        this.s.OS.S.CSV_DATA_MAP,\n        this.csvDataMap)\n    }\n    return parseResult\n  }\n}","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { APPLICATION_NAVIGATION } from '@fireflysemantics/constants'\nimport { ApplicationComponent } from './components/application/application.component';\nimport { AuthGuard } from '@fireflysemantics/amplify';\nimport { LoginComponent } from './components/login/login.component';\n\nexport const ROUTES = {\n  HOME: '',\n  APPLICATION: APPLICATION_NAVIGATION.APPLICATION.path,\n  LOGIN: APPLICATION_NAVIGATION.LOGIN.path,\n  FAQ: APPLICATION_NAVIGATION.FAQ.path,\n  SUPPORT: APPLICATION_NAVIGATION.SUPPORT.path\n}\n\nconst routes: Routes = [\n  { path: ROUTES.HOME, component: HomeComponent },\n  { path: ROUTES.APPLICATION, \n    component: ApplicationComponent,\n    canActivate: [AuthGuard] },\n  { path: ROUTES.LOGIN, component: LoginComponent },\n  { path: ROUTES.FAQ, component: HomeComponent },\n  { path: ROUTES.SUPPORT, component: HomeComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }","import { CsvFile } from '@fireflysemantics/csv'\nimport { RowKeyError } from '@fireflysemantics/error'\nimport { TableData } from '@fireflysemantics/cdk'\nimport { ErrorTypes } from '@fireflysemantics/material'\n\nexport const ERROR_TYPES: ErrorTypes = {\n    PARSER_ERROR: 'Parser Error',\n    UNMATCHED_KEY_HEADER_ERROR: \"Unmatched Key Header Error\",\n    DUPLICATE_SELECTED_HEADER_ERROR: \"Duplicate Selected Header Error\",\n    UNDEFINED_KEY_VALUE_ERROR: \"Undefined Key Value Error\",\n    DUPLICATE_KEY_ERROR: \"Duplicate Key Error\",\n    DUPLICATES_ERROR: \"Duplicate Row Error\",\n    REFERENTIAL_INTEGRITY_ERROR: \"Referential Integrity Error\",\n    DATA_ERROR: \"Data Error\"\n}\n\n/**\n * Enumerated list of validation errors that can occur.\n * \n * PARSER_ERROR: Captures parser errors\n * \n * UNMATCHED_KEY_HEADER_ERROR: The CSV file is missing one or more key headers\n *\n * DUPLICATE_SELECTED_HEADER_ERROR: The headers selected have to be unique across the dataset\n * \n * DUPLICATES_ERROR: Whether there are duplicates in the record set\n * \n * UNDEFINED_KEY_VALUE_ERROR: All the keys have to be defined\n * \n * REFERENTIAL_INTEGRITY_ERROR: An object match could not be made\n * \n * DATA_ERROR\n */\nexport const ERROR_TYPE_KEYS:ErrorTypes =  {\n    PARSER_ERROR: \"PARSER_ERROR\",\n    UNMATCHED_KEY_HEADER_ERROR: \"UNMATCHED_KEY_HEADER_ERROR\",\n    DUPLICATE_SELECTED_HEADER_ERROR: \"DUPLICATE_SELECTED_HEADER_ERROR\",\n    UNDEFINED_KEY_VALUE_ERROR: \"UNDEFINED_KEY_VALUE_ERROR\",\n    DUPLICATE_KEY_ERROR: \"DUPLICATE_KEY_ERROR\",\n    DUPLICATES_ERROR: \"DUPLICATES_ERROR\",\n    REFERENTIAL_INTEGRITY_ERROR: \"REFERENTIAL_INTEGRITY_ERROR\",\n    DATA_ERROR: \"DATA_ERROR\"\n}\n\n\n/**\n * The columns for `FileRowKeyError` entities.\n */\nexport const FILE_ROW_KEY_ERROR_COLUMNS = ['FILE_NAME', 'FIELD', 'ROW']\n\n/**\n * Instances of this class are created when\n * the column value used as a key\n * has empty strings ('', '    '), is `null`, or is `undefined`. \n */\nexport class FileRowKeyError extends RowKeyError {\n    /**\n     * \n     * @param FIELD The property used as the key\n     * @param ROW The entity row formatted as a string\n     * @param FILE_NAME The name of the file containing the row with the key error\n     * @example \n     * [{ FILE_NAME: 'data.csv', FIELD: 'the_primary_key', ROW: '[the_primary_key = null'][name = joe]'}\n     */\n    constructor(\n        public FIELD: string,\n        public ROW: string,\n        public FILE_NAME: string) {\n        super(FIELD, ROW)\n    }\n}\n\n/**\n * If a row is a duplicate of another then this error captures\n * that.  \n */\nexport const FILE_ROW_DUPLICATES_ERROR_COLUMNS = ['FILE_NAME', 'ROW']\n\nexport class FileRowDuplicatesError {\n    constructor(\n        public ROW: string,\n        public FILE_NAME: string) {\n    }\n}\n\n/**\n * Container of the errors of a certain type from all the tables.\n */\nexport class IndexedMetaError {\n    public indexedMeta: Map<number, CsvFile> = new Map()\n    public type: string\n    public indexErrors: Map<number, any[]> = new Map()\n    public tableData: TableData = new TableData()\n}\n\n/**\n * In order to check for missing column keys\n * in tables, we first produce a global set\n * from all the checked keys.  \n * \n * Then we check if each table has them all.\n * \n * If a table is missing a key, this error will reflect hat.\n */\nexport const MISSING_KEY_HEADER_ERROR_COLUMNS = ['FILE_NAME', 'HEADER']\n\nexport class MissingKeyHeaderError {\n    constructor(\n        public FILE_NAME: string,\n        public HEADER: string) { }\n}\n\nexport const DUPLICATE_SELECTED_HEADER_ERROR_COLUMNS = ['FILE_NAME', 'HEADER']\n\n/**\n * If the user has selected two columns with the same header value.\n */\nexport class DuplicateSelectedHeaderError {\n    constructor(\n        public FILE_NAME: string,\n        public HEADER: string) { }\n}\n\n/**\n * We produce a global set of entity keys that spans all tables.\n * \n * The we check if each table has an object that matches\n * the key.  If a table is missing the object, this error\n * capture that.\n */\nexport const MISSING_OBJECT_ERROR_COLUMNS = ['FILE_NAME', 'KEY']\n\nexport class MissingObject {\n    constructor(\n        public KEY: string,\n        public FILE_NAME: string) { }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\nimport Auth from '@aws-amplify/auth';\nimport AWSConfig from './aws-exports';\nAuth.configure(AWSConfig);\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { StateService } from '../../services/state.service';\nimport { CsvSelectionData, CsvSelectionDataAssemblyContainer } from '../../models';\nimport { ValidationService } from '../validation';\n\nexport function processMultipleTables(\n    dataMap: Map<number, CsvSelectionData>,\n    s: StateService,\n    v: ValidationService) {\n\n    const keyHeader = s.keySnapshot()\n\n    if (!v.validate(v.multiTableValidators, dataMap, s.OS.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //========================================\n    // No errors so reset error state\n    //========================================\n    s.resetErrorState()\n\n    //========================================\n    // Index and map all the CsvSelectionData\n    // instances.\n    //========================================\n    dataMap.forEach(CSV=>{\n        CSV.indexAndMapData(keyHeader)\n    })\n\n    //========================================\n    // Perform the Assembly\n    //========================================\n    const CSDAC = new CsvSelectionDataAssemblyContainer(dataMap)\n\n    //========================================\n    // Initialize the sticky headers\n    //========================================\n    CSDAC.assembly.stickyHeaders =\n        [keyHeader]\n\n    if (CSDAC.hasAssemblyHeaders()) {\n        s.OS.put(\n            s.OS.S.PROCESS_RESULT,\n            CSDAC.assembly)\n    }\n    return true\n}"],"sourceRoot":"webpack:///"}