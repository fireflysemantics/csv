{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/shared/csv.worker.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/application/application.component.ts","./src/app/components/application/application.component.html","./src/app/components/csv-errors/csv-errors.component.ts","./src/app/components/csv-errors/csv-errors.component.html","./src/app/components/csv-header-selection/csv-header-selection.component.ts","./src/app/components/csv-header-selection/csv-header-selection.component.html","./src/app/components/csv-header-selection/csv-header-table/csv-header-table.component.ts","./src/app/components/csv-header-selection/csv-header-table/csv-header-table.component.html","./src/app/components/csv-header-selection/csv-load/csv-load.component.ts","./src/app/components/csv-header-selection/csv-load/csv-load.component.html","./src/app/components/csv-process/csv-process.component.ts","./src/app/components/csv-process/csv-process.component.html","./src/app/components/data-table/data-table.component.ts","./src/app/components/data-table/data-table.component.html","./src/app/components/faq/faq.component.ts","./src/app/components/faq/faq.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/support/support.component.ts","./src/app/components/support/support.component.html","./src/app/components/toolbar/toolbar-menu/toolbar-menu.component.ts","./src/app/components/toolbar/toolbar-menu/toolbar-menu.component.html","./src/app/components/toolbar/toolbar.component.ts","./src/app/components/toolbar/toolbar.component.html","./src/app/components/welcome/welcome.component.ts","./src/app/components/welcome/welcome.component.html","./src/app/shared/asset.service.ts","./src/app/shared/auth.guard.ts","./src/app/shared/auth.service.ts","./src/app/shared/component-data.service.ts","./src/app/shared/csv.service.ts","./src/app/shared/data.service.ts","./src/app/shared/material.modules.ts","./src/app/shared/model/CsvHeaderMetaRow.ts","./src/app/shared/model/CsvSelectionData.ts","./src/app/shared/model/CsvSelectionDataAssemblyContainer.ts","./src/app/shared/model/error.ts","./src/app/shared/model/index.ts","./src/app/shared/model/localstorage.ts","./src/app/shared/model/menus.ts","./src/app/shared/model/routes.ts","./src/app/shared/process/data-process.service.ts","./src/app/shared/process/processMultipleTables.ts","./src/app/shared/process/processSingleTable.ts","./src/app/shared/state/action.state.service.ts","./src/app/shared/state/enabled.state.service.ts","./src/app/shared/state/index.ts","./src/app/shared/state/play.state.service.ts","./src/app/shared/state/router.state.service.ts","./src/app/shared/state/state.service.ts","./src/app/shared/validation/index.ts","./src/app/shared/validation/isAtLeastOneHeaderSelected.ts","./src/app/shared/validation/isAtLeastOneKeySelected.ts","./src/app/shared/validation/rowConverter.ts","./src/app/shared/validation/validateKeyValues.ts","./src/app/shared/validation/validateMatchingKeyHeaders.ts","./src/app/shared/validation/validateReferentialIntegrity.ts","./src/app/shared/validation/validateSelectedHeadersUnique.ts","./src/app/shared/validation/validateUniqueCompoundKeys.ts","./src/app/shared/validation/validation.service.ts","./src/aws-exports.js","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;ACZA,iBAAiB,qBAAuB,gB;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;;;;;;AAUnC,MAAM,YAAY;IAEvB,YAAoB,CAAe,EAAE,CAAc,EAAS,GAAuB;QAA/D,MAAC,GAAD,CAAC,CAAc;QAAyB,QAAG,GAAH,GAAG,CAAoB;QADnF,UAAK,GAAG,KAAK;QAEf,6EAA6E;QAC3E,kFAAkF;IAClF,CAAC;;wEALU,YAAY;4FAAZ,YAAY;QCDzB,yEAA2B;QAO3B,0EACI;;QAAA,2EAA+B;QACnC,4DAAO;;QAFmB,0DAAmE;QAAnE,2OAAmE;;6FDNhF,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AACS;AAClB;AACgC;AACrB;AACH;AACmB;AACsB;AACvB;AACa;AACkC;AACvB;AACa;AACzB;AACH;AACD;AACzB;AACT;AACoB;AACN;AACa;AACxB;;;AAClD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,MAAM;QACjB,UAAU,EAAE,SAAS;KACtB;IACD;QACE,IAAI,EAAE,SAAS;QACf,SAAS,EAAE,uFAAgB;KAC5B;IACD;QACE,IAAI,EAAE,aAAa;QACnB,SAAS,EAAE,mGAAoB;QAC/B,WAAW,EAAE,CAAC,6DAAS,CAAC;KACzB;IACD;QACE,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,iFAAc;KAC1B;IACD;QACE,IAAI,EAAE,KAAK;QACX,SAAS,EAAE,2EAAY;KACxB;IACD;QACE,IAAI,EAAE,SAAS;QACf,SAAS,EAAE,uFAAgB;KAC5B;IACD;QACE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS;KAClC;CAAC,CAAC;AAiCE,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAZJ;YACP,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC;YAC5B,uEAAa;YACb,qEAAgB;YAChB,4FAAuB;YACvB,uEAAc;YACd,0DAAW;YACX,kEAAmB;YACnB,sEAAc;YACd,iEAAe;SAChB;mIAKU,SAAS,mBA7BlB,uFAAgB;QAChB,2DAAY;QACZ,sFAAgB;QAChB,4GAAoB;QACpB,mGAAoB;QACpB,qIAAuB;QACvB,8GAAgB;QAChB,4HAA2B;QAC3B,kGAAmB;QACnB,+FAAkB;QAClB,+FAAkB;QAClB,iFAAc;QACd,uFAAgB,2EAIhB,uEAAa;QACb,qEAAgB;QAChB,4FAAuB;QACvB,uEAAc;QACd,0DAAW;QACX,kEAAmB;QACnB,sEAAc;QACd,iEAAe;6FAMN,SAAS;cA/BrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,uFAAgB;oBAChB,2DAAY;oBACZ,sFAAgB;oBAChB,4GAAoB;oBACpB,mGAAoB;oBACpB,qIAAuB;oBACvB,8GAAgB;oBAChB,4HAA2B;oBAC3B,kGAAmB;oBACnB,+FAAkB;oBAClB,+FAAkB;oBAClB,iFAAc;oBACd,uFAAgB;iBACjB;gBACD,OAAO,EAAE;oBACP,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC;oBAC5B,uEAAa;oBACb,qEAAgB;oBAChB,4FAAuB;oBACvB,uEAAc;oBACd,0DAAW;oBACX,kEAAmB;oBACnB,sEAAc;oBACd,iEAAe;iBAChB;gBACD,eAAe,EAAE,CAAC,4HAA2B,CAAC;gBAC9C,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACrFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6F;;;;;;;AAQtF,MAAM,oBAAoB;IAY/B,YACU,GAAyB;QAAzB,QAAG,GAAH,GAAG,CAAsB;IAAI,CAAC;IALxC,eAAe;QACb,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG;IACzB,CAAC;IAKD,eAAe;QACb,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE;IAC5B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;IAClB,CAAC;IAED,QAAQ;IACR,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;IACnB,CAAC;;wFA5BU,oBAAoB;oGAApB,oBAAoB;6EAKL,8DAAgB;;;;;QCb5C,4EAGI;QAHI,4IAAS,qBAAiB,IAAC;QAG/B,2EAAU;QAAA,kEAAO;QAAA,4DAAW;QAChC,4DAAS;QAET,yEACI;QAAA,0EACM;QACV,4DAAM;QAEN,+EAAuC;;6FDH1B,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;kBAME,uDAAS;mBAAC,KAAK,EAAE,EAAE,IAAI,EAAE,8DAAgB,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;AEb0B;AACH;AAG/B;AACmC;;;;;;ICHjE,sEACI;IAAA,qEAAI;IAAA,wEAAa;IAAA,4DAAK;IACtB,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;;IAE7C,sEACI;IAAA,qEAAI;IAAA,sFAA2B;IAAA,4DAAK;IACpC,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;;IAE7C,sEACI;IAAA,qEAAI;IAAA,4FAAiC;IAAA,4DAAK;IAC1C,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;;IAE7C,sEACI;IAAA,qEAAI;IAAA,6EAAkB;IAAA,4DAAK;IAC3B,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;;IAE7C,sEACI;IAAA,qEAAI;IAAA,kFAAuB;IAAA,4DAAK;IAChC,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;;IAE7C,sEACI;IAAA,qEAAI;IAAA,uFAA4B;IAAA,4DAAK;IACrC,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;;IAE7C,sEACI;IAAA,qEAAI;IAAA,sEAAW;IAAA,4DAAK;IACpB,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;;IAEjD,iEACM;;;IA/BV,sEACI;IAAA,yEACI;IAAA,oHACI;IAGJ,oHACI;IAGJ,oHACI;IAGJ,oHACI;IAGJ,oHACI;IAGJ,oHACI;IAGJ,oHACI;IAGR,oHACA;IACA,4DAAM;IACV,4DAAM;;;IAhCG,0DAAsC;IAAtC,sGAAsC;IAClC,0DAA4C;IAA5C,6GAA4C;IAI5C,0DAAgD;IAAhD,iHAAgD;IAIhD,0DAAqD;IAArD,sHAAqD;IAIrD,0DAAyD;IAAzD,0HAAyD;IAIzD,0DAAgD;IAAhD,iHAAgD;IAIhD,0DAA2D;IAA3D,4HAA2D;IAI3D,0DAA0C;IAA1C,2GAA0C;;IDb1C,kBAAkB,SAAlB,kBAAkB;IAiB7B,YACS,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;QAbxB,4BAA4B;QAC5B,uBAAuB;QACvB,4BAA4B;QAC5B,oBAAe,GAAG,oEAAe;QAEjC,4BAA4B;QAC5B,2BAA2B;QAC3B,wBAAwB;QACxB,4BAA4B;QAC5B,2CAAsC,GAAY,KAAK;IAKvD,CAAC;IAED,QAAQ,KAAW,CAAC;IAEpB,eAAe;QACb,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,GAAG,CAAC,IAAI,CAC7C,4EAAc,CAAC,IAAI,CAAC,CAAC;YACrB,SAAS,CACP,CAAC,GAAqB,EAAE,EAAE;YACxB,IAAI,GAAG,EAAE;gBAEP;;;;;;mBAMG;gBACH,IAAI,CAAC,sCAAsC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;gBAE9D,IAAI,CAAC,yBAAyB,GAAG,GAAG,CAAC,IAAI;gBACzC,IAAI,CAAC,UAAU,GAAG,+CAAE,CAAC,GAAG,CAAC,SAAS,CAAC;aACpC;iBACI;gBACH,IAAI,CAAC,sCAAsC,GAAG,KAAK;aACpD;QACH,CAAC,CAAC;IACR,CAAC;CACF;oFA/CY,kBAAkB;kGAAlB,kBAAkB;QCb/B,+GACI;;QADC,4GAA8C;;ADatC,kBAAkB;IAN9B,0EAAY,EAAE;GAMF,kBAAkB,CA+C9B;AA/C8B;6FAAlB,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;kBAGE,mDAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;AEfiD;AAIY;;;;;;;;;IASxD,2BAA2B,SAA3B,2BAA2B;IAyCtC;;;;OAIG;IACH,YACU,CAAe,EACf,GAAyB,EAC1B,GAAe;QAFd,MAAC,GAAD,CAAC,CAAc;QACf,QAAG,GAAH,GAAG,CAAsB;QAC1B,QAAG,GAAH,GAAG,CAAY;QA/CxB,gBAAW,GAAW,EAAE;QAgBxB;;;;;;;;;;;;;;;;;WAiBG;QACH,SAAI,GAAQ,EAAE;QAcZ,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC;YACjD,SAAS,CAAC,CAAC,GAAkC,EAAE,EAAE;YAC/C,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC7B,MAAM,OAAO,GAAqB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;gBACrD,IAAI,OAAO,EAAE;oBACX,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI;iBACrC;aACF;QACH,CAAC,CAAC;IACN,CAAC;IAtBD,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;IAC9B,CAAC;IAsBD,MAAM;QACJ,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;IACvC,CAAC;CACF;sGAhEY,2BAA2B;2GAA3B,2BAA2B;QCbxC,yEAII;QAAA,sEACI;QAAA,6EACmC;QACnC,4EAGI;QAHI,mJAAS,YAAQ,IAAC;QAGtB,2EAAU;QAAA,kFAAuB;QAAA,4DAAW;QAChD,4DAAS;QACb,4DAAM;QACN,0EAEY;QAAA,uDAAe;QAAA,4DAAO;QACtC,4DAAM;QAEN,qFAA6D;;QAbvC,0DAAa;QAAb,0EAAa;QAUnB,0DAAe;QAAf,0FAAe;QAGT,0DAAe;QAAf,4EAAe;;ADLxB,2BAA2B;IANvC,0EAAY,EAAE;GAMF,2BAA2B,CAgEvC;AAhEuC;6FAA3B,2BAA2B;cALvC,uDAAS;eAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,WAAW,EAAE,uCAAuC;gBACpD,SAAS,EAAE,CAAC,uCAAuC,CAAC;aACrD;;kBAgBE,mDAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE5B2E;AACM;AACtC;AACO;AACG;AACO;AACT;;;;;;;;;;;ICK/C,sFAGI;IAAA,mFAGe;IAHD,kWAAmC;IAGjD,4DAAe;IACnB,4DAAkB;;;IAHV,0DAAmD;IAAnD,0HAAmD;;;;IAK3D,+EAGI;IAAA,mFAGe;IAHD,oTAAyB,iLAAU,wBAAwB,IAAlC,2SACf,iCAAqB,IADN;IAGvC,4DAAe;IACnB,4DAAW;;;;IAJO,0DAAyB;IAAzB,oFAAyB;;;IAS3C,sFAGI;IAAA,uDACJ;IAAA,4DAAkB;;;IADd,0DACJ;IADI,gGACJ;;;IAEA,+EAEI;IAAA,uDACJ;IAAA,4DAAW;;;;IADP,0DACJ;IADI,yGACJ;;;IAKA,sFAII;IAAA,uDACJ;IAAA,4DAAkB;;;IADd,0DACJ;IADI,6FACJ;;;;IAEA,+EAEI;IAAA,mFAIe;IAJD,iTAAqB,kLACtB,wBAAwB,IADF;IAInC,4DAAe;IACnB,4DAAW;;;IALO,0DAAqB;IAArB,gFAAqB;;;IAQ3C,4EACiB;;;IACjB,yEAAsF;;;IAA9B,gFAAmB;;;IDjDtE,uBAAuB,SAAvB,uBAAuB;IAmFlC,YAAoB,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;QA7EnC,UAAK,GAAG,CAAC;QA+BT,cAAS,GAAG,IAAI,uEAAc,CAAmB,IAAI,EAAE,EAAE,CAAC,CAAC;QAyB3D,kBAAa,GAAG,QAAQ;QACxB,eAAU,GAAG,KAAK;QAElB,YAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC;QACrC,eAAU,GACR,IAAI,0EAAkB,CAAmB,EAAE,CAAC;IAgBP,CAAC;IA3ExC,IAAI,CAAC,KAAsC;QACzC,IAAI,KAAK,CAAC,iBAAiB,KAAK,KAAK,CAAC,SAAS,EAAE;YAC/C,8EAAe,CACb,KAAK,CAAC,SAAS,CAAC,IAAI,EACpB,KAAK,CAAC,aAAa,EACnB,KAAK,CAAC,YAAY,CAAC,CAAC;YAEtB,MAAM,GAAG,GACP,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;YAE1C,MAAM,OAAO,GACX,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;YAErB,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;YACxC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC;YACxC,8BAA8B;YAC9B,4CAA4C;YAC5C,8BAA8B;YAC9B,0BAA0B;YAC1B,gCAAgC;SACjC;aAAM;YACL,gFAAiB,CACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAC5B,KAAK,CAAC,SAAS,CAAC,IAAI,EACpB,KAAK,CAAC,aAAa,EACnB,KAAK,CAAC,YAAY,CAAC,CAAC;SACvB;IACH,CAAC;IAGD,gFAAgF;IAChF,aAAa;QACX,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5C,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,OAAO,CAAC;IACpD,CAAC;IAED,gFAAgF;IAChF,YAAY;QACV,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YACtB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAC1B,GAAG,CAAC,EAAE;gBACJ,GAAG,CAAC,OAAO,GAAG,KAAK;YACrB,CAAC,CAAC;SACL;aACI;YACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAC1B,GAAG,CAAC,EAAE;gBACJ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;gBAC1B,GAAG,CAAC,OAAO,GAAG,IAAI;YACpB,CAAC,CAAC;SACL;IACH,CAAC;IASD;;;;;;;OAOG;IACH,mBAAmB,CAAC,GAAqB;QACvC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gCAAgC,EAC5C,IAAI,CAAC;IACT,CAAC;IAID,QAAQ;QACN,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC;YACjD,SAAS,CAAC,CAAC,GAAkC,EAAE,EAAE;YAC/C,IAAI,GAAG,EAAE;gBACP,MAAM,GAAG,GAAqB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;gBACjD,IAAI,GAAG,EAAE;oBACP,MAAM,IAAI,GAAuB,GAAG,CAAC,IAAI;oBACzC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI;iBAC5B;aACF;QACH,CAAC,CAAC;QACJ,+CAA+C;QAC/C,kCAAkC;QAClC,wDAAwD;QACxD,+CAA+C;IACjD,CAAC;IAED,eAAe;QACb,+CAA+C;QAC/C,uBAAuB;QACvB,+CAA+C;QAC/C,oCAAoC;QACpC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IAC7C,CAAC;CACF;8FA7GY,uBAAuB;uGAAvB,uBAAuB;kEAEvB,gEAAQ;kEACR,wEAAY;;;;;;QCnBzB,yEACI;QAAA,+EAOI;QAHA,kLAAsB,gBAAY,IAAC;QAInC,2EAEI;QAAA,2IAGI;QAMJ,6HAGI;QAKR,qEAAe;QAEf,2EAEI;QAAA,2IAGI;QAGJ,6HAEI;QAER,qEAAe;QAEf,2EAEI;QAAA,2IAII;QAGJ,+HAEI;QAMR,qEAAe;QAEf,4IACA;QACA,8HAA4E;QAChF,4DAAY;QACZ,gFAEyC;QAC7C,4DAAM;;QAnEE,0DAAyB;QAAzB,sFAAyB;QA2BX,0DAA8B;QAA9B,2FAA8B;QAc9B,0DAA2B;QAA3B,wFAA2B;QAmBzB,0DAA0B;QAA1B,wFAA0B;QAEjC,0DAAsC;QAAtC,yFAAsC;QAEpC,0DAAmC;QAAnC,kJAAmC;;ADnDzC,uBAAuB;IANnC,0EAAY,EAAE;GAMF,uBAAuB,CA6GnC;AA7GmC;6FAAvB,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,mCAAmC,CAAC;aACjD;;kBAGE,uDAAS;mBAAC,gEAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;;kBACrC,uDAAS;mBAAC,wEAAY,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;;kBAEzC,mDAAK;;;;;;;;;;;;;;AErBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAKuB;AAEiC;;;;AAQjD,MAAM,gBAAgB;IAU3B;;;;;;;OAOG;IACH;QAfA,SAAI,GAAQ,EAAE;QAgBZ,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;IACrC,CAAC;IAED,aAAa,CAAC,KAAK;QACjB,MAAM,IAAI,GAAS,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAY,IAAI,6DAAO,EAAE;QACtC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QACxB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QACxB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;QACxB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE;YAC7B,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;YACxD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IACD,QAAQ,KAAW,CAAC;;gFAlCT,gBAAgB;gGAAhB,gBAAgB;QCf7B,4EAIE;QAAA,8EAAsC;QAAA,sEAAW;QAAA,4DAAW;QAC5D,iEACA;QAAA,2EAGF;QAFI,+IAAU,yBAAqB,IAAC;QADlC,4DAGF;QAAA,4DAAS;;6FDMI,gBAAgB;cAN5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;gBACxC,eAAe,EAAE,qEAAuB,CAAC,MAAM;aAChD;;kBAGE,mDAAK;;kBAGL,mDAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEpB0C;AAEmB;;;;;;;;;;;;ICmBrE,sEACI;IAAA,qEAAI;IAAA,iEAAM;IAAA,4DAAK;IACf,+EAA2D;IAC/D,4DAAM;;;IADc,0DAAyB;IAAzB,yFAAyB;;IDRhC,mBAAmB,SAAnB,mBAAmB;IAI9B,YACU,CAAe,EACf,CAAqB,EACtB,CAAsB,EACtB,CAAqB,EACrB,GAAe;QAJd,MAAC,GAAD,CAAC,CAAc;QACf,MAAC,GAAD,CAAC,CAAoB;QACtB,MAAC,GAAD,CAAC,CAAqB;QACtB,MAAC,GAAD,CAAC,CAAoB;QACrB,QAAG,GAAH,GAAG,CAAY;IAAI,CAAC;IAE7B,QAAQ;QACN,yEAAyE;QACzE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG;IAClD,CAAC;IAED,eAAe,KAAW,CAAC;IAE3B,OAAO;QACL,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;IAClB,CAAC;CACF;sFArBY,mBAAmB;mGAAnB,mBAAmB;QCfhC,4EAMI;QANI,2IAAS,aAAS,IAAC;;QAMvB,8EAAsC;QAAA,8DAAG;QAAA,4DAAW;QACpD,qEACJ;QAAA,4DAAS;QAET,4EAKI;QAFA,2IAAS,cAAU,IAAC;;QAEpB,8EAAsC;QAAA,+DAAI;QAAA,4DAAW;QACrD,kEACJ;QAAA,4DAAS;QAET,6EAAiC;QAEjC,iHACI;;;QAjBA,mKAA+C;QAS/C,0DAA4C;QAA5C,gKAA4C;QAO3C,0DAAgC;QAAhC,wJAAgC;;ADNxB,mBAAmB;IAN/B,0EAAY,EAAE;GAMF,mBAAmB,CAqB/B;AArB+B;6FAAnB,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;AEdD;;GAEG;AACgF;AACtB;AACO;AACnB;AACU;AAEV;;;;;;;;ICFrC,qFACoB;IAAA,uDAAwC;IAAA,4DAAkB;;;IAA1D,0DAAwC;IAAxC,wGAAwC;;;IAC5D,2EAAiC;IAAA,uDACjC;IAAA,4DAAW;;;;IADsB,0DACjC;IADiC,+JACjC;;;IANJ,2EAGI;IAAA,qJACoB;IACpB,uIAAiC;IAErC,qEAAe;;;;IANX,uGAAkC;IAClC,yFAAsB;;;IAM1B,4EACiB;;;IACjB,qEAA0D;;IDIrD,kBAAkB,SAAlB,kBAAkB;IAkB7B,YAAoB,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;QAdnC;;;;;WAKG;QACH,cAAS,GAAc,IAAI,+DAAS,EAAE;QAKtC,YAAO,GAAG,EAAE;QACZ,eAAU,GAA4B,IAAI,0EAAkB,CAAC,EAAE,CAAC;IAE1B,CAAC;IAEvC,QAAQ;QACN,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAY,EAAE,EAAE;YACpE,IAAI,EAAE,EAAE;gBACN,IAAI,CAAC,SAAS,GAAC,EAAE;gBACjB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,OAAO;gBACzB,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI;aAC/B;QACH,CAAC,CAAC;IACJ,CAAC;IAED,eAAe;QACb,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IAC7C,CAAC;IAED,QAAQ,CAAC,MAAc;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACtE,CAAC;CACF;oFAtCY,kBAAkB;kGAAlB,kBAAkB;kEAYlB,8DAAO;kEACP,wEAAY;;;;;;QC/BzB,yEACI;QAAA,+EAGI;QAAA,gIAGI;QAKJ,oIACA;QACA,sHAAgD;QACpD,4DAAY;QACZ,8EAEyC;QAC7C,4DAAM;;QAjBE,0DAAyB;QAAzB,sFAAyB;QAEX,0DAAyB;QAAzB,gFAAyB;QAQvB,0DAA0B;QAA1B,wFAA0B;QAEjC,0DAAsC;QAAtC,yFAAsC;QAEpC,0DAA6C;QAA7C,0GAA6C;;ADEnD,kBAAkB;IAN9B,0EAAY,EAAE;GAMF,kBAAkB,CAsC9B;AAtC8B;6FAAlB,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;kBAGE,mDAAK;;kBAUL,uDAAS;mBAAC,8DAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;;kBACpC,uDAAS;mBAAC,wEAAY,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;;;;;;;;;;;;;;AE/B5C;AAAA;AAAA;AAAkD;;AAO3C,MAAM,YAAY;IAEvB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;wEALU,YAAY;4FAAZ,YAAY;QCPzB,qEAAI;QAAA,8DAAG;QAAA,4DAAK;QAEZ,qEAAI;QAAA,wGAA6C;QAAA,4DAAK;QACtD,oEACI;QAAA,iLAGJ;QAAA,4DAAI;QACJ,qEAAI;QAAA,0FAA+B;QAAA,4DAAK;QACxC,oEACI;QAAA,6HAEJ;QAAA,4DAAI;;6FDLS,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,SAAS;gBACnB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AENiD;AACD;AACJ;AAIwB;;;;;;;;;;;ICLjE,yEAEI;IAAA,yEACI;IAAA,6EAEe;IACnB,4DAAM;IACN,sEACI;IAAA,uEAA8B;IAAA,mGAAwC;IAAA,4DAAI;IAC1E,uEAGoB;IAAA,2EAAgB;IAAA,4DAAI;IAAC,0EAAiC;IAAA,6EAAkB;IAAA,4DAAO;IACnG,wEAGoB;IAAA,0EAAc;IAAA,4DAAI;IAC1C,4DAAM;IACV,4DAAM;;;IAdM,0DAA0B;IAA1B,0FAA0B;;;;IAiBtC,sEACI;IAAA,4EAII;IAHA,8SAAiB;;IAGjB,yEAC0D;IAAC,4FAC/D;IAAA,4DAAS;IACb,4DAAM;;;IAPM,0DAAuC;IAAvC,8JAAuC;IAKvC,0DAA0C;IAA1C,0GAA0C;;IDd7C,cAAc,SAAd,cAAc;IAMzB,YACU,EAAe,EACf,CAAe,EACf,IAAiB;QAFjB,OAAE,GAAF,EAAE,CAAa;QACf,MAAC,GAAD,CAAC,CAAc;QACf,SAAI,GAAJ,IAAI,CAAa;QAP3B,kBAAa,GAAG,+DAAG;QAEZ,eAAU,GAAgB,IAAI,0DAAW,CAAC,KAAK,CAAC;QAMrD,IAAI,CAAC,UAAU;YACb,YAAY,CAAC,IAAI,CAAC,4EAAc,CAAC,IAAI,CAAC,CAAC;YACvC,SAAS,CACP,CAAC,QAAiB,EAAE,EAAE;YACpB,IAAI,CAAC,SAAS,EAAE;QAClB,CAAC,CAAC;IACR,CAAC;IAED,4CAA4C;IAC5C,SAAS;QACP,IAAI,CAAC,EAAE,CAAC,0BAA0B,EAAE;QACpC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,4BAA4B,EACxC,IAAI,CAAC;IACT,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,4BAA4B,CAAC,GAAG;IACrD,CAAC;IAED,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;IAC9B,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,GAAG;IACzC,CAAC;IAED,QAAQ,KAAW,CAAC;CACrB;4EAvCY,cAAc;8FAAd,cAAc;QCd3B,uEACI;QAAA,2GAEI;;QAkBJ,gEACA;QAAA,0GACI;;QAQR,4DAAO;;QA7BC,0DAAmC;QAAnC,uJAAmC;QAoBlC,0DAAqC;QAArC,yJAAqC;;ADRjC,cAAc;IAN1B,0EAAY,EAAE;GAMF,cAAc,CAuC1B;AAvC0B;6FAAd,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAA;AAAA;AAAkD;;;AAE3C,MAAM,UAAU,GAAG,2DAA2D;AAQ9E,MAAM,gBAAgB;IAE3B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;IAED,SAAS,CAAC,CAAQ;QAChB,CAAC,CAAC,eAAe,EAAE;QACnB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;;gFAVU,gBAAgB;gGAAhB,gBAAgB;QCV7B,qEAAI;QAAA,kEAAO;QAAA,4DAAK;QAChB,uEACI;QAAA,gJAGA;QAAA,4EAEgC;QAA5B,8IAAS,qBAAiB,IAAC;QAAC,qEAAU;QAAA,4DAAS;QAAC,gFACxD;QAAA,4DAAI;;6FDES,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAEQ;;;;;;;;;;;ICYtD,4EAG2C;IAFvC,mVAAsC;IAER,4DAAS;;;IAAvC,2JAA6B;;;;IACjC,4EAG4C;IAFxC,qVAAuC;IAER,4DAAS;;;IAAxC,4JAA8B;;ADV/B,MAAM,oBAAoB;IAQ/B,YACS,CAAe,EACf,CAAS,EACR,IAAiB;QAFlB,MAAC,GAAD,CAAC,CAAc;QACf,MAAC,GAAD,CAAC,CAAQ;QACR,SAAI,GAAJ,IAAI,CAAa;QAV3B,cAAS,GAAG,uDAAS;QACrB,WAAM,GAAG,oDAAM;IASgB,CAAC;IAPhC,eAAe;QACb,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,GAAG;IACzC,CAAC;IAMD,WAAW,CAAC,IAAY;QACtB,QAAQ,IAAI,EAAE;YACZ,KAAK,uDAAS,CAAC,WAAW;gBACxB,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,oDAAM,CAAC,WAAW,CAAC,CAAC;gBACrC,MAAM;YACR,KAAK,uDAAS,CAAC,OAAO;gBACpB,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,oDAAM,CAAC,OAAO,CAAC,CAAC;gBACjC,MAAM;YACR,KAAK,uDAAS,CAAC,KAAK;gBAClB,IAAI,CAAC,KAAK,EAAE;gBACZ,MAAM;YACR,KAAK,uDAAS,CAAC,MAAM;gBACnB,IAAI,CAAC,MAAM,EAAE;gBACb,MAAM;SACT;QACD,uCAAuC;QACvC,+BAA+B;QAC/B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC;IAC9C,CAAC;IAED,KAAK;QACH,MAAM,uBAAuB,GAC3B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAChB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,4BAA4B,CAAC;QAE7C,uBAAuB;YACrB,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC5B,CAAC;gBACD,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,oDAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;IACrB,CAAC;IAED,QAAQ;IACR,CAAC;;wFAjDU,oBAAoB;oGAApB,oBAAoB;QCXjC,4EAEI;QAAA,2EAAU;QAAA,oEAAS;QAAA,4DAAW;QAClC,4DAAS;QAET,oFACI;QAAA,4EAGiD;QAF7C,4IAAS,0CAAkC,IAAC;;QAER,4DAAS;QACjD,4EAE6C;QAFrC,4IAAS,sCAA8B,IAAC;QAEZ,4DAAS;QAE7C,sHAGkC;;QAClC,wHAGmC;;QACnC,6EAGyC;QAFrC,6IAAS,kCAA0B,IAAC;QAER,4DAAS;QACzC,6EAG6C;QAFzC,6IAAS,sCAA8B,IAAC;QAER,4DAAS;QAiB7C,6EACmC;QAAA,oEAAQ;QAAA,4DAAS;QACpD,qFACI;QAAA,wEACoB;QAAA,6EAAsB;QAAA,0EAAc;QAAA,4DAAS;QAAA,4DAAI;QACrE,yEACoB;QAAA,6EAAsB;QAAA,4EAAgB;QAAA,4DAAS;QAAA,4DAAI;QAC3E,4DAAW;QACf,4DAAW;;;;QArDP,kFAA0B;QAKlB,0DAAyC;QAAzC,8JAAyC;QAM7C,0DAA+B;QAA/B,0JAA+B;QAE3B,0DAAoC;QAApC,0JAAoC;QAIpC,0DAAiC;QAAjC,0JAAiC;QAIjC,0DAAyB;QAAzB,sFAAyB;QAIzB,0DAA6B;QAA7B,0FAA6B;QAqBjC,0DAA8B;QAA9B,kFAA8B;;6FDpCzB,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACA;AACP;;;;;;;;AAOpC,MAAM,gBAAgB;IAK3B;QAHA,kBAAa,GAAG,+DAAG;QACnB,WAAM,GAAG,oDAAM;IAEC,CAAC;IAEjB,QAAQ;IACR,CAAC;;gFARU,gBAAgB;gGAAhB,gBAAgB;QCT7B,iFACI;QAAA,4EAGI;QAAA,8EAA4D;QAAA,sEAAW;QAAA,4DAAW;QAClF,8EACJ;QAAA,4DAAS;QACT,8EAAqC;QACzC,4DAAc;;QANN,0DAAmC;QAAnC,qKAAmC;;6FDO9B,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AERD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAGP;;;;;;AAOpC,MAAM,gBAAgB;IAE3B,YAAmB,CAAe,EAAU,CAAS;QAAlC,MAAC,GAAD,CAAC,CAAc;QAAU,MAAC,GAAD,CAAC,CAAQ;IAAI,CAAC;IAE1D,QAAQ,KAAW,CAAC;IAEpB,eAAe;QACb,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,oDAAM,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;;gFARU,gBAAgB;gGAAhB,gBAAgB;QCV7B,gEACA;QAAA,gEACA;QAAA,wEACiC;QAAA,8DAC7B;QAAA,0EAA4B;QAAA,8DAAG;QAAA,4DAAO;QAC1C,4DAAK;QACL,qEACI;QAAA,mGACJ;QAAA,4DAAK;QACL,oEACI;QAAA,yLAIJ;QAAA,4DAAI;QACJ,sEACI;QAAA,8EACJ;QAAA,4DAAK;QACL,qEACI;QAAA,wGACJ;QAAA,4DAAI;QACJ,sEACI;QAAA,qFACJ;QAAA,4DAAK;QACL,qEACI;QAAA,4HAEJ;QAAA,4DAAI;QAEJ,sEACI;QAAA,6EACJ;QAAA,4DAAK;QACL,qEACI;QAAA,wIAEJ;QAAA,4DAAI;QAEJ,sEACI;QAAA,uGACJ;QAAA,4DAAK;QACL,qEACI;QAAA,qHAEJ;QAAA,4DAAI;QAEJ,sEACI;QAAA,gGACJ;QAAA,4DAAK;QACL,qEACI;QAAA,iIAEJ;QAAA,4DAAI;QAEJ,qEACI;QAAA,8EACA;QAAA,wEAEoB;QAAA,0EAAc;QAAA,4DAAI;QAC1C,4DAAI;QACJ,wEAAuB;;6FDjDV,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAGM;;;;AAK1C,MAAM,YAAY;IAEvB,YACU,eAAgC,EAChC,YAA0B;QAD1B,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAClC;YACG,IAAI,CAAC,eAAe,CAAC,UAAU,CAC9B,+DAAG,CAAC,WAAW,CAAC,IAAI,EACpB,IAAI,CAAC,YAAY,CAAC,8BAA8B,CAAC,+DAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1E;IACH,CAAC;;wEAVU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;6FAEP,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;GAIG;AAEwC;AAQP;;;;AAM7B,MAAM,SAAS;IACpB,YACU,MAAc,EACd,CAAe;QADf,WAAM,GAAN,MAAM,CAAQ;QACd,MAAC,GAAD,CAAC,CAAc;IAAI,CAAC;IAC9B,WAAW,CACT,IAA4B,EAC5B,KAA0B;QAC1B,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,0DAAG,CAAC,aAAa,CAAC,EAAE;YAC/D,IAAI,CAAC,aAAa,EAAE;gBAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC1B,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;;kEAdU,SAAS;4FAAT,SAAS,WAAT,SAAS,mBAFR,MAAM;6FAEP,SAAS;cAHrB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;;;;;;;;;;;;ACnByC;AAC+B;AACpB;AAErB;AAEoC;;;;AAK7D,MAAM,WAAW;IAItB,YACU,CAAe,EACf,CAAS;QADT,MAAC,GAAD,CAAC,CAAc;QACf,MAAC,GAAD,CAAC,CAAQ;QACjB,IAAI,CAAC,mBAAmB,EAAE;QAC1B,IAAI,CAAC,cAAc,EAAE;QACrB,IAAI,CAAC,qBAAqB,EAAE;IAC9B,CAAC;IAED,OAAO;QACL,OAAO,yDAAI,CAAC,OAAO,EAAE;aAClB,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;IAED,YAAY,CAAC,QAAyC;QACpD,OAAO,yDAAI,CAAC,eAAe,CAAC;YAC1B,UAAU,EAAE,QAAQ;SACrB,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,mBAAmB;QACjB,yDAAI,CAAC,wBAAwB,EAAE;YAC7B,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,EAAE,IAAI,CAAC;QACnD,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;YACZ,qDAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC1B,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI;gBACjC,IAAI,OAAO,KAAK,MAAM,EAAE;oBACtB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,EAC5B,OAAO,CAAC,KAAK,IAAI,4EAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;iBAC/D;YACH,CAAC,CAAC;QACJ,CAAC,CAAC;IACN,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAChD,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,6CAAM,CAAC,WAAW,CAAC,CAAC;YACnD,6EAA6E;QACzE,CAAC,CAAC;IACJ,CAAC;IAEK,cAAc;;YAClB,MAAM,IAAI,GAAG,MAAM,yDAAI,CAAC,eAAe,EAAE;YACzC,IAAI,IAAI,EAAE;gBACR,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,UAAU;gBAChE,MAAM,CAAC,GAAS,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE;gBACxD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;aACnC;QACH,CAAC;KAAA;IAED;;;;OAIG;IACG,gBAAgB;;YACpB;;;;;wCAK4B;QAC9B,CAAC;KAAA;;AArEa,kBAAM,GAAG,iFAA+B,CAAC,MAAM;sEAFlD,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuH;AACP;AAC9C;;;AAO3D,MAAM,oBAAoB;IAgB/B,YACU,QAAkC,EAClC,CAAe;QADf,aAAQ,GAAR,QAAQ,CAA0B;QAClC,MAAC,GAAD,CAAC,CAAc;QAhBzB,oCAAoC;QACpC,iCAAiC;QACjC,+BAA+B;QAC/B,oCAAoC;QAEpC,UAAK,GAAW,CAAC;QAEjB,oCAAoC;QACpC,wCAAwC;QACxC,oCAAoC;QACpC,QAAG,GAA2D,IAAI,GAAG,EAAE;IAM1C,CAAC;IAE9B,eAAe;QACb,MAAM,OAAO,GACX,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,2HAA2B,CAAC,CAAC;QACrE,MAAM,YAAY,GAA8C,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAElG,YAAY,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE;IACd,CAAC;IAED,gBAAgB,CAAC,KAAa;QAE5B,MAAM,YAAY,GAA8C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;QACnF,YAAY,CAAC,OAAO,EAAE;QACtB,wFAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC;QACnC,sCAAsC;QACtC,mCAAmC;QACnC,sCAAsC;QACtC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,CAAC,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC;QACtB,CAAC,CAAC;QACF,MAAM,OAAO,GAAkC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAEvF,sCAAsC;QACtC,uBAAuB;QACvB,4BAA4B;QAC5B,oCAAoC;QACpC,oCAAoC;QACpC,sCAAsC;QACtC,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;YAC3B,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACtB,wFAAkB,CAAC,OAAO,EAAE,KAAK,CAAC;aACnC;SACF;QAED,sCAAsC;QACtC,kCAAkC;QAClC,sBAAsB;QACtB,sCAAsC;QACtC,IAAI,CAAC,KAAK,EAAE;QACZ,sCAAsC;QACtC,yCAAyC;QACzC,yBAAyB;QACzB,sCAAsC;QACtC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC;IAC9C,CAAC;IAED;;;;;;OAMG;IACH,KAAK;QACH,IAAI,CAAC,GAAG;YACR,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAA8C,EAAE,EAAE;gBAClE,GAAG,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;QAC5B,MAAM,OAAO,GACb,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QACxC,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE;IAC5B,CAAC;;wFAnFU,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB,mBAFnB,MAAM;6FAEP,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEuC;AACjC;AAE+C;AAC/C;AACd;AAC6B;;;AAEhE,uCAAuC;AACvC,4BAA4B;AAC5B,uCAAuC;AACvC,2DAA2D;AAKpD,MAAM,UAAU;IAIrB,YAAoB,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;QAFnC,eAAU,GAAkC,IAAI,GAAG,EAAE;IAEd,CAAC;IAExC,IAAI;QACF,MAAM,MAAM,GACV,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;QAGhD,gCAAgC;QAChC,wBAAwB;QACxB,iCAAiC;QACjC,MAAM,GAAG,GAAG,sEAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;QACjC,kBAAkB;QAClB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC;QAClE,MAAM,QAAQ,GAAG,OAAO,uEAAQ,EAAE,MAAM;QACxC,yDAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;IACxB,CAAC;IAED,OAAO,CACL,OAAgB;QAChB,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK;QAChC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,oBAAc,EAAE,SAAkB,CAAC;QAC7D,IAAI,WAA6B;QAEjC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG,CAAC,EAAE,IAAI,EAA8B,EAAE,EAAE;YAC1D,WAAW,GAAG,IAAI,CAKvB,CAAM,sCAAsC;YACvC,IAAI,CAAC,CAAC,CAAC,eAAe,EAAE;YAExB,MAAM,WAAW,GAAiB,IAAI,CAAC,MAAM;YAE7C,sCAAsC;YACtC,0BAA0B;YAC1B,sCAAsC;YACtC,IAAI,WAAW,CAAC,MAAM,EAAE;gBAEtB,MAAM,GAAG,GAAoB,IAAI,uDAAgB,EAAE;gBACnD,GAAG,CAAC,IAAI,GAAG,sDAAe,CAAC,YAAY;gBACvC,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW;gBAChC,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,6EAAuB;gBAC/C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,EACtC,GAAG,CAAC;gBACN,OAAO,IAAI;aACZ;YAED,MAAM,OAAO,GAAa,IAAI,CAAC,IAAI,CAAC,MAAM;YAC1C,MAAM,aAAa,GAAuB,EAAE;YAE5C,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAClB,aAAa,CAAC,IAAI,CAAC,IAAI,uDAAgB,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC;YAEF,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM;YAEnC,sCAAsC;YACtC,qBAAqB;YACrB,sCAAsC;YACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;gBAChC,sFAAgB,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC;YAEF,MAAM,OAAO,GAAG,IAAI,uDAAgB,CAClC,OAAO,EACP,aAAa,EACb,IAAI,+DAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAEpC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC;YAEnC,IAAI,CAAC,CAAC,CAAC,eAAe,EAAE;YACxB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EACpB,IAAI,CAAC,UAAU,CAAC;QACpB,CAAC;QACD,OAAO,WAAW;IACpB,CAAC;;oEAnFU,UAAU;6FAAV,UAAU,WAAV,UAAU,mBAFT,MAAM;6FAEP,UAAU;cAHtB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;;ACjBD;AAAA;AAAA;AAAA;AAAA;AAAqD;AAEP;;;AAKvC,MAAM,WAAW;IAEtB;;;;;OAKG;IACH,YAAoB,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;QACjC,IAAI,CAAC,gCAAgC,EAAE;IACzC,CAAC;IAED,0BAA0B;QACxB,YAAY,CAAC,OAAO,CAAC,0DAAkB,CAAC,YAAY,EAAE,MAAM,CAAC;IAC/D,CAAC;IAED,wBAAwB;QACtB,OAAO,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,0DAAkB,CAAC,YAAY,CAAC;IAChE,CAAC;IACD,WAAW,KAAW,CAAC;IAEvB,gCAAgC;QAC9B,IAAI,IAAI,CAAC,wBAAwB,EAAE,EAAE;YACnC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,4BAA4B,EAAE,IAAI,CAAC;SAC9D;IACH,CAAC;;sEAzBU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAqB;AACwC;AAC2C;AAC/C;AACc;AACd;AACE;AACa;AACjB;AACQ;AACN;AACI;AACM;AACR;AACM;AACC;AACF;AACT;AACE;AACF;AACA;AACU;AACK;AACQ;AACrB;AACA;AACE;AACE;AACF;AACW;AACN;AACT;AACE;AACF;AACM;AACA;AACN;;;AAEvD,MAAM,EAAE,GAAG;IACT,oFAAqB;IACrB,sEAAc;IACd,wEAAe;IACf,qFAAqB;IACrB,oEAAa;IACb,4EAAiB;IACjB,sEAAc;IACd,2EAAgB;IAChB,iFAAmB;IACnB,yEAAe;IACf,+EAAkB;IAClB,gFAAkB;IAClB,8EAAiB;IACjB,oEAAa;IACb,uEAAc;IACd,qEAAa;IACb,qEAAa;IACb,+EAAkB;IAClB,oFAAoB;IACpB,4FAAwB;IACxB,uEAAc;IACd,sEAAe;IACf,yEAAe;IACf,2EAAgB;IAChB,yEAAe;IACf,oFAAoB;IACpB,8EAAiB;IACjB,qEAAa;IACb,uEAAc;IACd,qEAAa;IACb,2EAAgB;IAChB,2EAAgB;IAChB,qEAAa;IACb,0EAAmB;CACpB;AASM,MAAM,cAAc;IACvB,YAAmB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAC/C,+DAA+D;IACnE,CAAC;IAED,MAAM,CAAC,OAAO;QACV,OAAO;YACH,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE,CAAC,sEAAe,CAAC;SAC/B;IACL,CAAC;;6FAVQ,cAAc;sJAAd,cAAc,iJAHZ,EACV,YAJQ,CAAE,GAAG,EAAE,CAAE,EArCpB,oFAAqB;QACrB,sEAAc;QACd,wEAAe;QACf,qFAAqB;QACrB,oEAAa;QACb,4EAAiB;QACjB,sEAAc;QACd,2EAAgB;QAChB,iFAAmB;QACnB,yEAAe;QACf,+EAAkB;QAClB,gFAAkB;QAClB,8EAAiB;QACjB,oEAAa;QACb,uEAAc;QACd,qEAAa;QACb,qEAAa;QACb,+EAAkB;QAClB,oFAAoB;QACpB,4FAAwB;QACxB,uEAAc;QACd,sEAAe;QACf,yEAAe;QACf,2EAAgB;QAChB,yEAAe;QACf,oFAAoB;QACpB,8EAAiB;QACjB,qEAAa;QACb,uEAAc;QACd,qEAAa;QACb,2EAAgB;QAChB,2EAAgB;QAChB,qEAAa;QACb,0EAAmB;mIAUR,cAAc,cA3CzB,oFAAqB;QACrB,sEAAc;QACd,wEAAe;QACf,qFAAqB;QACrB,oEAAa;QACb,4EAAiB;QACjB,sEAAc;QACd,2EAAgB;QAChB,iFAAmB;QACnB,yEAAe;QACf,+EAAkB;QAClB,gFAAkB;QAClB,8EAAiB;QACjB,oEAAa;QACb,uEAAc;QACd,qEAAa;QACb,qEAAa;QACb,+EAAkB;QAClB,oFAAoB;QACpB,4FAAwB;QACxB,uEAAc;QACd,sEAAe;QACf,yEAAe;QACf,2EAAgB;QAChB,yEAAe;QACf,oFAAoB;QACpB,8EAAiB;QACjB,qEAAa;QACb,uEAAc;QACd,qEAAa;QACb,2EAAgB;QAChB,2EAAgB;QAChB,qEAAa;QACb,0EAAmB,aAjCnB,oFAAqB;QACrB,sEAAc;QACd,wEAAe;QACf,qFAAqB;QACrB,oEAAa;QACb,4EAAiB;QACjB,sEAAc;QACd,2EAAgB;QAChB,iFAAmB;QACnB,yEAAe;QACf,+EAAkB;QAClB,gFAAkB;QAClB,8EAAiB;QACjB,oEAAa;QACb,uEAAc;QACd,qEAAa;QACb,qEAAa;QACb,+EAAkB;QAClB,oFAAoB;QACpB,4FAAwB;QACxB,uEAAc;QACd,sEAAe;QACf,yEAAe;QACf,2EAAgB;QAChB,yEAAe;QACf,oFAAoB;QACpB,8EAAiB;QACjB,qEAAa;QACb,uEAAc;QACd,qEAAa;QACb,2EAAgB;QAChB,2EAAgB;QAChB,qEAAa;QACb,0EAAmB;6FAUR,cAAc;cAP1B,sDAAQ;eAAC;gBACN,OAAO,EAAE,CAAE,GAAG,EAAE,CAAE;gBAClB,OAAO,EAAE,CAAC,GAAG,EAAE;iBACd;gBACD,SAAS,EAAE,EACV;aACJ;;;;;;;;;;;;;;ACjFD;AAAA;AAAO,MAAM,gBAAgB;IAGzB,YAAmB,MAAe;QAAf,WAAM,GAAN,MAAM,CAAS;QAF3B,QAAG,GAAY,KAAK;QACpB,YAAO,GAAY,KAAK;IACO,CAAC;CAC1C;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAqE;AACpB;AAI1C,MAAM,gBAAgB;IAIzB;;;;;OAKG;IACH,YACW,IAAa,EACb,IAAwB,EACxB,SAAoB;QAFpB,SAAI,GAAJ,IAAI,CAAS;QACb,SAAI,GAAJ,IAAI,CAAoB;QACxB,cAAS,GAAT,SAAS,CAAW;QAXxB,mBAAc,GAAqB,IAAI,GAAG,EAAE;IAY/C,CAAC;IAEE,aAAa;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;YAC/B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;IAClD,CAAC;IAEM,kBAAkB;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YACnC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;IAClD,CAAC;IAED;;;;;;;OAOG;IACH,WAAW;QACP,IAAI,CAAC,SAAS,EAAE;QAChB,IAAI,CAAC,OAAO,EAAE;QACd,OAAO,IAAI;IACf,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,OAAO;QACH,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;YACjD,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE;gBAClC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACxC,MAAM,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;oBACpC,MAAM,MAAM,GAAG,+EAAS,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBACtD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC;gBACtC,CAAC,CAAC;gBACF,IAAI,CAAC,UAAU,GAAG,IAAI,+DAAS,EAAE;gBACjC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;gBACxD,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE;aACtD;SACJ;QACD,4CAA4C;QAC5C,6BAA6B;QAC7B,sCAAsC;QACtC,4BAA4B;QAC5B,4CAA4C;aACvC,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE;YACvC,MAAM,IAAI,GAAG,EAAE;YACf,IAAI,CAAC,UAAU,GAAG,IAAI,+DAAS,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE;YACnD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,+EAAS,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;YACtD,CAAC,CAAC;SACL;IACL,CAAC;IAED;;;OAGG;IACI,SAAS;QACZ,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE;YAC7B,IAAI,CAAC,cAAc,GAAG,gFAAU,CAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,EACnB,IAAI,CAAC,aAAa,EAAE,CAAC;SAC5B;IACL,CAAC;CACJ;;;;;;;;;;;;;AC5GD;AAAA;AAAA;AAAiD;AAGjD;;;;;;;;;;;GAWG;AACI,MAAM,iCAAiC;IAK1C,YAAmB,OAAsC;QAAtC,YAAO,GAAP,OAAO,CAA+B;QAErD,IAAI,CAAC,QAAQ,GAAG,IAAI,+DAAS,EAAE;QAE/B,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;YAEzB,uCAAuC;YACvC,oCAAoC;YACpC,uCAAuC;YACvC,EAAE;YACF,uCAAuC;YACvC,yCAAyC;YACzC,uCAAuC;YAEvC,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAElE,IAAI,CAAC,qBAAqB,EAAE;YAC5B,IAAI,IAAI,CAAC,kBAAkB,EAAE,EAAE;gBAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE;aACjD;SACJ;IACL,CAAC;IAED,kBAAkB;QACd,MAAM,YAAY,GAAG,EAAE;QACvB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YAC3B,IAAI,cAAc,GAAG,EAAE;YACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACrB,IAAI,CAAC,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE;oBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;oBAClC,cAAc,mCACP,cAAc,GACd,CAAC,CACP;iBACJ;YACL,CAAC,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;YAC3B,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC;QACrC,CAAC,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;QACzB,OAAO,YAAY;IACvB,CAAC;IAED,qBAAqB;QACjB,IAAI,OAAO,GAAG,EAAE;QAChB,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACrC,OAAO,GAAG,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC,kBAAkB,EAAE,CAAC;QACrD,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO;QAC/B,OAAO,OAAO;IAClB,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB;QACd,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM;IACzC,CAAC;CACJ;;;;;;;;;;;;;ACjFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACJ;AACjD;;GAEG;AACH,IAAY,eAQX;AARD,WAAY,eAAe;IACvB,qEAAY;IACZ,6EAAgB;IAChB,uFAAqB;IACrB,6EAAgB;IAChB,+FAAyB;IACzB,mGAA2B;IAC3B,iEAAU;AACd,CAAC,EARW,eAAe,KAAf,eAAe,QAQ1B;AAED;;;;;GAKG;AACI,MAAM,0BAA0B,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,KAAK,CAAC;AAChE,MAAM,eAAgB,SAAQ,mEAAW;IAC5C,YACW,KAAa,EACb,GAAW,EACX,SAAiB;QACxB,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC;QAHV,UAAK,GAAL,KAAK,CAAQ;QACb,QAAG,GAAH,GAAG,CAAQ;QACX,cAAS,GAAT,SAAS,CAAQ;IAE5B,CAAC;CACJ;AAED;;;GAGG;AACI,MAAM,gCAAgC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC;AAE7D,MAAM,sBAAsB;IAC/B,YACW,GAAW,EACX,SAAiB;QADjB,QAAG,GAAH,GAAG,CAAQ;QACX,cAAS,GAAT,SAAS,CAAQ;IAC5B,CAAC;CACJ;AAED;;GAEG;AACI,MAAM,gBAAgB;IAA7B;QACW,gBAAW,GAAyB,IAAI,GAAG,EAAE;QAE7C,gBAAW,GAAuB,IAAI,GAAG,EAAE;QAC3C,cAAS,GAAc,IAAI,+DAAS,EAAE;IACjD,CAAC;CAAA;AAED;;;;;;;;GAQG;AACI,MAAM,gCAAgC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC;AAEhE,MAAM,qBAAqB;IAC9B,YACW,SAAiB,EACjB,MAAc;QADd,cAAS,GAAT,SAAS,CAAQ;QACjB,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;CACjC;AAEM,MAAM,uCAAuC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC;AAC9E;;;GAGG;AACI,MAAM,4BAA4B;IACrC,YACW,SAAiB,EACjB,MAAc;QADd,cAAS,GAAT,SAAS,CAAQ;QACjB,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;CACjC;AAGD;;;;;;GAMG;AACI,MAAM,4BAA4B,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC;AAEzD,MAAM,aAAa;IACtB,YACW,GAAW,EACX,SAAiB;QADjB,QAAG,GAAH,GAAG,CAAQ;QACX,cAAS,GAAT,SAAS,CAAQ;IAAI,CAAC;CACpC;;;;;;;;;;;;;ACjGD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;AACD;AACmB;AACnB;AACW;AACiB;AACjB;AACJ;;;;;;;;;;;;;ACP9B;AAAA;AAAO,MAAM,kBAAkB,GAAG;IAC9B,kBAAkB,EAAE,oBAAoB;IACxC,YAAY,EAAE,cAAc;CAC/B;;;;;;;;;;;;;ACHD;AAAA;AAAA;;;;;GAKG;AACH,IAAY,SAUX;AAVD,WAAY,SAAS;IACjB,0BAAa;IACb,wCAA2B;IAC3B,gCAAmB;IACnB,4BAAe;IACf,8BAAiB;IACjB,0CAA6B;IAC7B,wBAAW;IACX,gCAAmB;IACnB,0BAAa;AACjB,CAAC,EAVW,SAAS,KAAT,SAAS,QAUpB;;;;;;;;;;;;;AChBD;AAAA;AAAA,IAAY,MAMX;AAND,WAAY,MAAM;IACd,sCAA4B;IAC5B,8BAAoB;IACpB,0BAAgB;IAChB,sBAAY;IACZ,8BAAoB;AACxB,CAAC,EANW,MAAM,KAAN,MAAM,QAMjB;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAIc;AACM;;;;AAKxD,MAAM,kBAAkB;IAE7B,YACU,CAAe,EACf,CAAoB;QADpB,MAAC,GAAD,CAAC,CAAc;QACf,MAAC,GAAD,CAAC,CAAmB;IAAI,CAAC;IAEnC;;OAEG;IACH,OAAO;QAEL,qCAAqC;QACrC,mCAAmC;QACnC,oCAAoC;QACpC,uCAAuC;QACvC,EAAE;QACF,wCAAwC;QACxC,qCAAqC;QAErC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,EAC1B,IAAI,CAAC;QAEP,0CAA0C;QAC1C,8BAA8B;QAC9B,0CAA0C;QAC1C,MAAM,OAAO,GACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAE1C,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,EAAE;YACrB,OAAO,8EAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;SACnD;QACD,OAAO,oFAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACvD,CAAC;;oFAjCU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;6FAEP,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAA+E;AAEI;AAE5E,SAAS,qBAAqB,CACjC,OAAsC,EACtC,CAAe,EACf,CAAoB;IAEpB,wCAAwC;IACxC,mCAAmC;IACnC,wCAAwC;IACxC,cAAc;IACd,0CAA0C;IAC1C,0CAA0C;IAC1C,4CAA4C;IAC5C,yBAAyB;IACzB,0CAA0C;IAC1C,UAAU;IACV,0CAA0C;IAC1C,0BAA0B;IAC1B,+BAA+B;IAC/B,8CAA8C;IAC9C,8BAA8B;IAC9B,yBAAyB;IACzB,0CAA0C;IAE1C,IAAI,CAAC,CAAC,uBAAuB,CACzB,OAAO,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAAE;QACpC,OAAO,KAAK;KACf;IAED,wCAAwC;IACxC,mCAAmC;IACnC,4BAA4B;IAC5B,wCAAwC;IACxC,IAAI,CAAC,CAAC,0BAA0B,CAC5B,OAAO,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAAE;QACpC,OAAO,KAAK;KACf;IAED,wCAAwC;IACxC,wCAAwC;IACxC,wCAAwC;IACxC,IAAI,CAAC,CAAC,cAAc,CAChB,OAAO,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAAE;QACpC,OAAO,KAAK;KACf;IAED,0CAA0C;IAC1C,oCAAoC;IACpC,0CAA0C;IAC1C,UAAU;IACV,0CAA0C;IAC1C,+BAA+B;IAC/B,aAAa;IACb,aAAa;IACb,2CAA2C;IAC3C,aAAa;IACb,0CAA0C;IAE1C,wCAAwC;IACxC,sCAAsC;IACtC,wCAAwC;IACxC,IAAI,CAAC,CAAC,0BAA0B,CAC5B,OAAO,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAAE;QACpC,OAAO,KAAK;KACf;IAED,wCAAwC;IACxC,eAAe;IACf,wCAAwC;IACxC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAChB,CAAC,CAAC,WAAW,EAAE;IACnB,CAAC,CAAC;IAGF,wCAAwC;IACxC,+BAA+B;IAC/B,wCAAwC;IACxC,IAAI,CAAC,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAAE;QACzE,OAAO,KAAK;KACf;IAED,wCAAwC;IACxC,uBAAuB;IACvB,iCAAiC;IACjC,gBAAgB;IAChB,wCAAwC;IACxC,MAAM,gBAAgB,GAClB,2EAAuB,CAAC,OAAO,CAAC;QAChC,CAAC,8EAA0B,CAAC,OAAO,CAAC;IAGxC,IAAI,gBAAgB,EAAE;KAErB;IAED,0CAA0C;IAC1C,iCAAiC;IACjC,0CAA0C;IAC1C,CAAC,CAAC,EAAE,CAAC,GAAG,CACJ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,EACjC,IAAI,CAAC;IAET,0CAA0C;IAC1C,uBAAuB;IACvB,0CAA0C;IAC1C,MAAM,KAAK,GAAG,IAAI,wEAAiC,CAAC,OAAO,CAAC;IAE5D,0CAA0C;IAC1C,gCAAgC;IAChC,0CAA0C;IAC1C,KAAK,CAAC,QAAQ,CAAC,aAAa;QAC5B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE;IAE9B,IAAI,KAAK,CAAC,kBAAkB,EAAE,EAAE;QAC5B,CAAC,CAAC,EAAE,CAAC,GAAG,CACJ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,EACrB,KAAK,CAAC,QAAQ,CAAC;KACtB;IACD,OAAO,IAAI;AACf,CAAC;;;;;;;;;;;;;AC3HD;AAAA;AAAO,SAAS,kBAAkB,CAC9B,OAAsC,EACtC,CAAe,EACf,CAAoB;IACpB,wCAAwC;IACxC,wCAAwC;IACxC,wCAAwC;IACxC,IAAI,CAAC,CAAC,cAAc,CAChB,OAAO,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAAE;QACpC,OAAO,KAAK;KACf;IAED,wCAAwC;IACxC,uCAAuC;IACvC,wCAAwC;IACxC,UAAU;IACV,0CAA0C;IAC1C,+BAA+B;IAC/B,aAAa;IACb,aAAa;IACb,2CAA2C;IAC3C,aAAa;IACb,0CAA0C;IAC1C,IAAI,CAAC,CAAC,0BAA0B,CAC5B,OAAO,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,EAAE;QACpC,OAAO,KAAK;KACf;IAED,wCAAwC;IACxC,eAAe;IACf,wCAAwC;IACxC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAChB,CAAC,CAAC,WAAW,EAAE;IACnB,CAAC,CAAC;IAEF,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAEpC,IAAI,aAAa,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE;QAC3C,aAAa,CAAC,UAAU,CAAC,aAAa;YACtC,aAAa,CAAC,aAAa,EAAE,CAAC,CAAC;gBAC/B,aAAa,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE;QAGlC,CAAC,CAAC,EAAE,CAAC,GAAG,CACJ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,EACrB,aAAa,CAAC,UAAU,CAAC;KAChC;IACD,OAAO,IAAI;AACf,CAAC;;;;;;;;;;;;;ACtDD;AAAA;AAAA;AAAA;AAAA;AAA2C;AAGP;;;AAK7B,MAAM,kBAAkB;IAG7B,YAAoB,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;QACjC,IAAI,CAAC,aAAa,EAAE;IACtB,CAAC;IAED;;;;OAIG;IACH,aAAa;QACX,IAAI,CAAC,cAAc;YACjB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CACjC,0DAAG,CAAC,CAAC,CAAC,EAAE;gBACN,OAAO,CAAC,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC;IACT,CAAC;;oFAlBU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;6FAEP,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAEM;AAEb;AACoB;;;AAKjD,MAAM,mBAAmB;IAI9B,YAAoB,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;QACjC,IAAI,CAAC,sBAAsB,EAAE;QAC7B,IAAI,CAAC,mBAAmB,EAAE;IAC5B,CAAC;IAED;;;OAGG;IACH,sBAAsB;QACpB,IAAI,CAAC,qBAAqB,GAAG,0DAAa,CACxC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,EACxB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gCAAgC,CAAC,GAAG,EAChD,CAAC,OAAsC,EAAE,EAAE;YACzC,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,EAAE;gBAChC,OAAO,IAAI;aACZ;YACD,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;gBAC/B,OAAO,2EAAuB,CAAC,OAAO,CAAC;aACxC;YACD,OAAO,KAAK;QACd,CAAC,CAAC;IACN,CAAC;IAED;;;;OAIG;IACH,mBAAmB;QACjB,IAAI,CAAC,kBAAkB;YACrB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CACjC,0DAAG,CAAC,CAAC,CAAC,EAAE;gBACN,OAAO,CAAC,CAAC,CAAC;YAAA,CAAC,CAAC,CAAC;IACrB,CAAC;;sFAtCU,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;6FAEP,mBAAmB;cAH/B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACG;AACR;AACO;;;;;;;;;;;;;ACHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;GAGG;AACuC;;;;;AAQ1C,MAAM,EAAE,GAAG;;;;;CAKV;AAKM,MAAM,WAAW;IACtB,YACU,CAAe,EACf,EAAc,EACd,CAAsB;QAG9B,0GAA0G;QALlG,MAAC,GAAD,CAAC,CAAc;QACf,OAAE,GAAF,EAAE,CAAY;QACd,MAAC,GAAD,CAAC,CAAqB;QAK9B,8EAA8E;QAE9E;;;;;;;;;;UAUE;QACF,sDAAsD;QACtD,8CAA8C;QAE9C;;;;;;;;;;;MAWF;IACA,CAAC;;sEArCU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAGT;AACU;AACW;;;;AAMhD,MAAM,kBAAkB;IAQ3B,YAAoB,CAAe,EAAU,CAAS;QAAlC,MAAC,GAAD,CAAC,CAAc;QAAU,MAAC,GAAD,CAAC,CAAQ;QAP/C,wBAAmB,GAC1B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,GAAG;QAE/B,2BAAsB,GAC7B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,0DAAG,CAAC,CAAC,GAAE,EAAC,CAAC,CAAC,CAAC;QAInD,IAAI,CAAC,oBAAoB,EAAE;IAC/B,CAAC;IAED;;;OAGG;IACH,oBAAoB;QAChB,MAAM,YAAY,GACd,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CACd,6DAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,YAAY,6DAAa,CAAC,EAC/C,0DAAG,CAAC,CAAC,KAAoB,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjD,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YAEzB,QAAQ,GAAG,EAAE;gBACT,KAAK,6CAAM,CAAC,WAAW;oBACnB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB,EAAE,IAAI,CAAC;oBACvD,MAAM;gBACV,OAAO,CAAC,CAAC;oBACL,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB,EAAE,KAAK,CAAC;iBAC3D;aACJ;QACL,CAAC,CAAC;IACN,CAAC;;oFAjCQ,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFf,MAAM;6FAET,kBAAkB;cAH9B,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;;;;;;;;;;;;ACVD;AAAA;AAAA;AAAA;AAAA;AAA2C;AACiC;;AAErE,MAAM,GAAG,GAAgB;IAE9B,mCAAmC;IACnC,gBAAgB;IAChB,mCAAmC;IAEnC,kBAAkB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IACnC,kCAAkC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IACnD,4BAA4B,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;IAE9C,mCAAmC;IACnC,gBAAgB;IAChB,mCAAmC;IACnC,UAAU,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IAC3B,WAAW,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IAC5B,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IAC7B,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IACrB,UAAU,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IAC3B,gBAAgB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;IAElC,mCAAmC;IACnC,kBAAkB;IAClB,mCAAmC;IACnC,mBAAmB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;IACrC,yBAAyB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;IAC3C,wBAAwB,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;IACtC,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IACzB,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IAE/B,mCAAmC;IACnC,mBAAmB;IACnB,mCAAmC;IACnC,0BAA0B,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IAE3C,mCAAmC;IACnC,YAAY;IACZ,mCAAmC;IACnC,WAAW,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;IAC5B,gCAAgC,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;IAClD,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;IAEvB,mCAAmC;IACnC,gBAAgB;IAChB,mCAAmC;IACnC,sBAAsB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;CACzC;AAoDM,MAAM,YAAY;IAEvB;QADA,OAAE,GAAG,IAAI,8DAAM,CAAO,GAAG,CAAC;IACV,CAAC;IAEjB,eAAe;QACb,IAAI,CAAC,EAAE,CAAC,GAAG,CACT,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,0BAA0B,EACpC,IAAI,CAAC;IACT,CAAC;;wEARU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;6FAEP,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACnGD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACH;AACX;AACK;AACS;AACE;AACF;AACG;AACX;;;;;;;;;;;;;ACNpC;AAAA;AAAA;;;IAGI;AACG,SAAS,0BAA0B,CAAC,OAAsC;IAC7E,IAAI,QAAQ,GAAG,IAAI;IACnB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAChB,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE;YAChC,QAAQ,GAAG,KAAK;SACnB;IACL,CAAC,CAAC;IACF,OAAO,QAAQ;AACnB,CAAC;;;;;;;;;;;;;ACZD;AAAA;AAAA;;;GAGG;AACI,SAAS,uBAAuB,CAAC,OAAsC;IAC1E,IAAI,QAAQ,GAAG,IAAI;IACnB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAChB,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE;YAC3B,QAAQ,GAAG,KAAK;SACnB;IACL,CAAC,CAAC;IACF,OAAO,QAAQ;AACnB,CAAC;;;;;;;;;;;;;ACdD;AAAA;AAAA;;;;;;;;;GASG;AACI,SAAS,YAAY,CAAC,CAAM;IAC/B,MAAM,aAAa,GAAa,EAAE;IAClC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACb,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI;QACrC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC;IAChC,CAAC,CAAC;IACF,MAAM,GAAG,GAAW,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;IAC1C,OAAO,GAAG;AACd,CAAC;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAuE;AACkE;AAEzI;;;;;;;GAOG;AACI,SAAS,iBAAiB,CAAC,OAAsC;IACpE,MAAM,GAAG,GAAG,IAAI,uDAAgB,EAAE;IAClC,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,iEAA0B;IAClD,GAAG,CAAC,IAAI,GAAG,sDAAe,CAAC,yBAAyB;IACpD,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;QACvB,MAAM,KAAK,GAAsB,EAAE;QACnC,IAAI,GAAG,CAAC,aAAa,EAAE,CAAC,MAAM,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,MAAM,IAAI,GAAkB,gFAAgB,CACxC,GAAG,CAAC,SAAS,CAAC,IAAI,EAClB,GAAG,CAAC,aAAa,EAAE,EACnB,mDAAY,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACb,MAAM,IAAI,GAAG,IAAI,sDAAe,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC/D,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;YACpB,CAAC,CAAC;YACF,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;YAC7B,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC;YAChC,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC;SACzD;IACL,CAAC,CAAC;IACF,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AAClD,CAAC;;;;;;;;;;;;;AChCD;AAAA;AAAA;AAAA;AAAA;AAAoF;AACR;AACM;AAElF;;GAEG;AACI,SAAS,0BAA0B,CACtC,OAAsC;IAEtC,sCAAsC;IACtC,uCAAuC;IACvC,cAAc;IACd,sCAAsC;IACtC,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;QAClB,OAAO,IAAI;KACd;IAED,sCAAsC;IACtC,iCAAiC;IACjC,sCAAsC;IACtC,MAAM,UAAU,GAAG,EAAE;IACrB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAChB,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;IACtC,CAAC,CAAC;IACF,MAAM,QAAQ,GAAG,8EAAQ,CAAC,UAAU,CAAC;IAErC,sCAAsC;IACtC,wBAAwB;IACxB,sCAAsC;IACtC,MAAM,GAAG,GAAG,IAAI,uDAAgB,EAAE;IAClC,GAAG,CAAC,IAAI,GAAG,4DAAe,CAAC,gBAAgB;IAC3C,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,6EAAgC;IAExD,sCAAsC;IACtC,6BAA6B;IAC7B,sCAAsC;IACtC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QACxB,MAAM,OAAO,GAAa,IAAI,CAAC,aAAa,EAAE;QAC9C,MAAM,KAAK,GAAG,EAAE;QAEhB,IAAI,OAAO,GAAG,wFAAkB,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,OAAO,CAAC;QAExD,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;YAC3B,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAChB,MAAM,KAAK,GAAG,IAAI,4DAAqB,CACnC,IAAI,CAAC,IAAI,CAAC,IAAI,EACd,CAAC,CAAC;gBACN,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;YACrB,CAAC,CAAC;YACF,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;YACjC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;YAC7B,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC;SACzD;IACL,CAAC,CAAC;IACF,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AAClD,CAAC;;;;;;;;;;;;;ACxDD;AAAA;AAAA;AAAA;AAA4E;AACE;AAE9E;;;;;;;;;;;;;GAaG;AACI,SAAS,4BAA4B,CACxC,OAAsC;IAEtC,MAAM,GAAG,GAAG,IAAI,uDAAgB,EAAE;IAClC,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,yEAA4B;IACpD,GAAG,CAAC,IAAI,GAAG,4DAAe,CAAC,2BAA2B;IAEtD,IAAI,gBAAgB,GAAG,EAAE;IAEzB,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACpB,uCAAuC;QACvC,6CAA6C;QAC7C,gBAAgB,GAAG;YACf,GAAG,gBAAgB;YACnB,GAAG,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE;SAAC;IACrC,CAAC,CAAC;IACF,mCAAmC;IACnC,+BAA+B;IAE/B,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC;IAE9C,8BAA8B;IAC9B,2BAA2B;IAC3B,gCAAgC;IAEhC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACzB,MAAM,cAAc,GAAG,EAAE;QACzB,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACrB,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC5B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC;gBAC/B,MAAM,SAAS,GAAG,IAAI,oDAAa,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBACrD,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC;aACjC;QACL,CAAC,CAAC;QACF,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC;QACxC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC;QAClC,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,cAAc,CAAC;IACnE,CAAC,CAAC;IACF,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AAClD,CAAC;;;;;;;;;;;;;ACxDD;AAAA;AAAA;AAAA;AAAqJ;AAC7F;AAExD;;;;;;;GAOG;AACI,SAAS,6BAA6B,CACzC,OACqB;IACrB,sCAAsC;IACtC,uCAAuC;IACvC,cAAc;IACd,sCAAsC;IACtC,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;QAClB,OAAO,IAAI;KACd;IAED,sCAAsC;IACtC,iCAAiC;IACjC,sCAAsC;IACtC,MAAM,UAAU,GAAG,EAAE;IACrB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAChB,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,CAAC;IAC3C,CAAC,CAAC;IACF,MAAM,QAAQ,GAAG,8EAAQ,CAAC,UAAU,CAAC;IAErC,sCAAsC;IACtC,wBAAwB;IACxB,sCAAsC;IACtC,MAAM,GAAG,GAAG,IAAI,uDAAgB,EAAE;IAClC,GAAG,CAAC,IAAI,GAAG,sDAAe,CAAC,qBAAqB;IAChD,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,8EAAuC;IAE/D,sCAAsC;IACtC,wCAAwC;IACxC,sCAAsC;IACtC,MAAM,UAAU,GAAgB,IAAI,GAAG,EAAE;IAEzC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QACxB,MAAM,IAAI,GAAG,EAAE;QAEf,IAAI,CAAC,kBAAkB,EAAE;YACrB,OAAO,CAAC,CAAC,CAAC,EAAE;YACR,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACpB,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;aACpB;iBACI;gBACD,MAAM,KAAK,GAAG,IAAI,mEAA4B,CAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,EACd,CAAC,CAAC;gBACN,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;aACnB;QACL,CAAC,CAAC;QACN,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;QACjC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC;QAC5B,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC;IACzD,CAAC,CAAC;IACF,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AAClD,CAAC;;;;;;;;;;;;;AC/DD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;AACQ;AACqC;AAC7D;AAE7C;;;;;;;;;;;GAWG;AACI,SAAS,0BAA0B,CACtC,OAAsC;IAGtC,MAAM,GAAG,GAAG,IAAI,uDAAgB,EAAE;IAClC,GAAG,CAAC,IAAI,GAAG,4DAAe,CAAC,gBAAgB;IAC3C,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,6EAAgC;IAExD,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;QACvB,IAAI,GAAG,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE;YAE5B,MAAM,UAAU,GAAG,2FAAqB,CACpC,GAAG,CAAC,SAAS,CAAC,IAAI,EAClB,GAAG,CAAC,aAAa,EAAE,CAAC;YAExB,MAAM,iBAAiB,GACnB,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACf,MAAM,SAAS,GAAG,kEAAY,CAAC,CAAC,CAAC;gBACjC,MAAM,eAAe,GAAG,IAAI,mEAAsB,CAC9C,SAAS,EACT,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBAClB,OAAO,eAAe;YAC1B,CAAC,CAAC;YAEN,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC;YACzC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC;YAChC,GAAG,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,iBAAiB,CAAC;SACrE;IACL,CAAC,CAAC;IACF,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AAClD,CAAC;;;;;;;;;;;;;AC/CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAIY;AACwB;AACN;AACA;AACI;;;AAKtE,MAAM,iBAAiB;IAE5B,YAAoB,CAAe;QAAf,MAAC,GAAD,CAAC,CAAc;IAAI,CAAC;IAExC;;;;;;;;;;;;;;;;;;OAkBG;IACH,cAAc,CACZ,OAAsC,EACtC,YAA2B;QAE3B,MAAM,GAAG,GAAG,4EAAiB,CAAC,OAAO,CAAC;QACtC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC;IAC1C,CAAC;IAED;;;;;;OAMG;IACH,uBAAuB,CACrB,OAAsC,EACtC,YAA2B;QAE3B,MAAM,GAAG,GAAqB,8FAA0B,CAAC,OAAO,CAAC;QACjE,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC;IAC1C,CAAC;IAED,0BAA0B,CACxB,OAAsC,EACtC,YAA2B;QAC3B,MAAM,GAAG,GAAqB,oGAA6B,CAAC,OAAO,CAAC;QACpE,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC;IAC1C,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,0BAA0B,CACxB,OAAsC,EACtC,YAA2B;QAC3B,MAAM,GAAG,GAAG,8FAA0B,CAAC,OAAO,CAAC;QAC/C,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC;IAC1C,CAAC;IAED;;;;;;OAMG;IACH,yBAAyB,CACvB,OAAsC,EACtC,YAA2B;QAC3B,MAAM,GAAG,GAAqB,kGAA4B,CAAC,OAAO,CAAC;QACnE,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,GAAqB,EAAE,YAA2B;QAC1D,IAAI,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,YAAY,EAAE;YACpD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC;YAChC,OAAO,IAAI;SACZ;QACD,OAAO,KAAK;IACd,CAAC;;kFApGU,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM;6FAEP,iBAAiB;cAH7B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACZD;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,wEAAS,EAAC;;;;;;;;;;;;;ACzBzB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;AAEvB;AACM;AACF;;;AAEtC,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAEpC,mDAAO,CAAC,SAAS,CAAC,oDAAS,CAAC,CAAC;AAC7B,sDAAI,CAAC,SAAS,CAAC,oDAAS,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = __webpack_public_path__ + \"0.worker.js\"","import { Component } from '@angular/core';\nimport { PlayService } from './shared/state/play.state.service'\nimport { AssetService } from './shared/asset.service'\nimport { RouterStateService } from './shared/state/router.state.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'csv'\n  constructor(private a: AssetService, p: PlayService, public rss: RouterStateService) {\n//    rss.applicationShowing$.subscribe(v=>console.log(\"IS IT SHOWING: \", v))\n  //  rss.applicationNotShowing$.subscribe(v=>console.log(\"IS IT NOT SHOWING: \", v))\n  }\n}","<!--\n<div style=\"padding:2rem;\">\n    <app-csv-container></app-csv-container>\n</div>\n    <app-application></app-application>\n\n<app-application></app-application>\n    <app-csv-container></app-csv-container>\n-->\n<app-toolbar></app-toolbar>\n<!--\n<app-application></app-application>\n<main class=\"CenterContent\">\n    <router-outlet name=\"application\"></router-outlet>\n</main>\n-->\n<main style=\"margin:2rem\" [ngClass]=\"{'CenterContent': (rss.applicationNotShowing$ | async)}\">\n    <router-outlet></router-outlet>\n</main>\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './shared/material.modules'\nimport { RouterModule, Routes } from '@angular/router';\nimport { ToolbarComponent } from './components/toolbar/toolbar.component';\nimport { ToolbarMenuComponent } from './components/toolbar/toolbar-menu/toolbar-menu.component';\nimport { WelcomeComponent } from './components/welcome/welcome.component'\nimport { ApplicationComponent } from './components/application/application.component';\nimport { CsvHeaderTableComponent } from './components/csv-header-selection/csv-header-table/csv-header-table.component';\nimport { CsvLoadComponent } from './components/csv-header-selection/csv-load/csv-load.component';\nimport { CsvHeaderSelectionComponent } from './components/csv-header-selection/csv-header-selection.component'\nimport { CsvProcessComponent } from './components/csv-process/csv-process.component';\nimport { CsvErrorsComponent } from './components/csv-errors/csv-errors.component';\nimport { DataTableComponent } from './components/data-table/data-table.component'\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { AuthGuard } from './shared/auth.guard'\nimport { LoginComponent } from './components/login/login.component'\nimport { FaqComponent } from './components/faq/faq.component'\nimport { SupportComponent } from './components/support/support.component';\nimport { ScullyLibModule } from '@scullyio/ng-lib'\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'welcome'\n  },\n  {\n    path: 'welcome',\n    component: WelcomeComponent\n  },\n  {\n    path: 'application',\n    component: ApplicationComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'faq',\n    component: FaqComponent\n  },\n  {\n    path: 'support',\n    component: SupportComponent\n  },\n  {\n    path: '**', redirectTo: 'welcome'\n  }];\n\n@NgModule({\n  declarations: [\n    WelcomeComponent,\n    AppComponent,\n    ToolbarComponent,\n    ToolbarMenuComponent,\n    ApplicationComponent,\n    CsvHeaderTableComponent,\n    CsvLoadComponent,\n    CsvHeaderSelectionComponent,\n    CsvProcessComponent,\n    CsvErrorsComponent,\n    DataTableComponent,\n    LoginComponent,\n    SupportComponent\n  ],\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DragDropModule,\n    ScullyLibModule\n  ],\n  entryComponents: [CsvHeaderSelectionComponent],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Component, OnInit, ViewChild, ViewContainerRef, AfterViewInit } from '@angular/core'\nimport { ComponentDataService } from '../../shared/component-data.service'\n\n@Component({\n  selector: 'app-application',\n  templateUrl: './application.component.html',\n  styleUrls: ['./application.component.scss']\n})\nexport class ApplicationComponent implements OnInit, AfterViewInit {\n\n  //==================================\n  // The component container\n  //==================================\n  @ViewChild(\"vcr\", { read: ViewContainerRef })\n  VCR: ViewContainerRef;\n\n  ngAfterViewInit() {\n    this.cds.VCR = this.VCR\n  }\n\n  constructor(\n    private cds: ComponentDataService) { }\n\n  createComponent() {\n    this.cds.createComponent()\n  }\n\n  ngOnDestroy() {\n    this.cds.reset()\n  }\n\n  ngOnInit(): void {\n  }\n\n  clearContainer() {\n    this.VCR.clear();\n  }\n}","<button (click)=\"createComponent()\"\n    mat-icon-button\n    aria-label=\"Load CSV Dialog\">\n    <mat-icon>add_box</mat-icon>\n</button>\n\n<div class=\"CsvHeaderSelectionContainer\">\n    <div #vcr>\n    </div>\n</div>\n\n<app-csv-composite></app-csv-composite>","import { Component, OnInit, AfterViewInit, Input } from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { StateService } from '../../shared/state/'\nimport { TableData } from '@fireflysemantics/cdk';\nimport { Observable, of } from 'rxjs';\nimport { IndexedMetaError, ERROR_TYPE_ENUM } from 'src/app/shared/model';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-csv-errors',\n  templateUrl: './csv-errors.component.html',\n  styleUrls: ['./csv-errors.component.scss']\n})\nexport class CsvErrorsComponent implements OnInit, AfterViewInit {\n\n  @Input()\n  tableData$: Observable<TableData>\n\n  //==========================\n  // Template ENUM Access\n  //==========================\n  ERROR_TYPE_ENUM = ERROR_TYPE_ENUM\n\n  //==========================\n  // The enum retrie ed from \n  // the IndexedMetaError \n  //==========================\n  HAS_LOAD_AND_PROCESSING_ERROR_OCCURRED: boolean = false\n  LOAD_AND_PROCESSING_ERROR\n\n  constructor(\n    public s: StateService) {\n  }\n\n  ngOnInit(): void { }\n\n  ngAfterViewInit(): void {\n    this.s.os.S.LOAD_AND_PROCESSING_ERRORS.obs.pipe(\n      untilDestroyed(this)).\n      subscribe(\n        (IME: IndexedMetaError) => {\n          if (IME) {\n\n            /**\n             * Note that we are not using\n             * derived state.  We were using\n             * !!LOAD_AND_PROCESSING_ERROR but\n             * LOAD_AND_PROCESSING_ERROR can be 0, and \n             * then that expression fails.\n             */\n            this.HAS_LOAD_AND_PROCESSING_ERROR_OCCURRED = !isNaN(IME.type)\n\n            this.LOAD_AND_PROCESSING_ERROR = IME.type\n            this.tableData$ = of(IME.tableData)\n          }\n          else {\n            this.HAS_LOAD_AND_PROCESSING_ERROR_OCCURRED = false\n          }\n        })\n  }\n}","<div *ngIf=\"HAS_LOAD_AND_PROCESSING_ERROR_OCCURRED\">\n    <div [ngSwitch]=\"LOAD_AND_PROCESSING_ERROR\">\n        <div *ngSwitchCase=\"ERROR_TYPE_ENUM.PARSER_ERROR\">\n            <h3>Parser Errors</h3>\n            <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n        </div>\n        <div *ngSwitchCase=\"ERROR_TYPE_ENUM.KEY_HEADER_ERROR\">\n            <h3>Unmatched Key Header Errors</h3>\n            <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n        </div>\n        <div *ngSwitchCase=\"ERROR_TYPE_ENUM.SELECTED_HEADER_ERROR\">\n            <h3>Duplicate Header Selection Errors</h3>\n            <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n        </div>\n        <div *ngSwitchCase=\"ERROR_TYPE_ENUM.UNDEFINED_KEY_VALUE_ERROR\">\n            <h3>Invalid Key Errors</h3>\n            <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n        </div>\n        <div *ngSwitchCase=\"ERROR_TYPE_ENUM.DUPLICATES_ERROR\">\n            <h3>Duplicate Record Errors</h3>\n            <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n        </div>\n        <div *ngSwitchCase=\"ERROR_TYPE_ENUM.REFERENTIAL_INTEGRITY_ERROR\">\n            <h3>Referential Integrity Errors</h3>\n            <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n        </div>\n        <div *ngSwitchCase=\"ERROR_TYPE_ENUM.DATA_ERROR\">\n            <h3>Data Errors</h3>\n            <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n        </div>\n    <div *ngSwitchDefault>\n    </div>        \n    </div>\n</div>\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ComponentDataService } from '../../shared/component-data.service'\nimport { CsvService } from 'src/app/shared/csv.service';\nimport { StateService } from 'src/app/shared/state';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { CsvSelectionData } from 'src/app/shared/model';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-csv-header-selection',\n  templateUrl: './csv-header-selection.component.html',\n  styleUrls: ['./csv-header-selection.component.scss']\n})\nexport class CsvHeaderSelectionComponent implements OnInit {\n\n  csvFileName: string = ''\n  /**\n   * The index is assigned to the meta\n   * property which is assigned to the \n   * CSV Load component.  \n   * \n   * The index is also used by the \n   * csv header table to look up\n   * the data from the data map.\n   * \n   * We assign the index dynamically when\n   * creating the component.\n   */\n  @Input()\n  index: number\n\n  /**\n   * The meta property \n   * that we assign to the \n   * load csv component. \n   * \n   * It contains the index.\n   * \n   * The csv load component\n   * takes a meta property\n   * in order to make this into\n   * a generic component.  The meta\n   * property can then be passed\n   * to the CSV Service and it \n   * can retrieve the index.\n   * \n   * The meta index is initialized\n   * in ngOnInit()\n   */\n  meta: any = {}\n  ngOnInit(): void {\n    this.meta.index = this.index\n  }\n\n  /**\n   * The CSV Service\n   * is inject into the load\n   * csv component.\n   */\n  constructor(\n    private s: StateService,\n    private cds: ComponentDataService,\n    public csv: CsvService) {\n    this.s.os.S.CSV_DATA.obs.pipe(untilDestroyed(this)).\n      subscribe((map: Map<number, CsvSelectionData>) => {\n        if (map && !isNaN(this.index)) {\n          const csvData: CsvSelectionData = map.get(this.index)\n          if (csvData) {\n            this.csvFileName = csvData.meta.name\n          }\n        }\n      })\n  }\n\n  delete() {\n    this.cds.destroyComponent(this.index)\n  }\n}","<div style=\"padding: 1rem;\n            display:flex; \n            align-items: center; \n            justify-content: space-between;\">\n    <div>\n        <app-csv-load [meta]=\"meta\"\n            [service]='csv'></app-csv-load>\n        <button (click)=\"delete()\"\n            mat-icon-button\n            aria-label=\"Delete CSV Column Selection Component\">\n            <mat-icon>indeterminate_check_box</mat-icon>\n        </button>\n    </div>\n    <span style=\"color: gray; \n                font-family: 'Courier New', Courier, monospace;\">\n                {{csvFileName}}</span>\n</div>\n\n<app-csv-header-table [index]=\"index\"></app-csv-header-table>","import { Component, OnInit, AfterViewInit, ViewChild, Input } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { MatTable } from '@angular/material/table';\nimport { SelectionModel } from \"@angular/cdk/collections\";\nimport { MatTableDataSource } from '@angular/material/table';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { CsvHeaderMetaRow, CsvSelectionData } from 'src/app/shared/model';\nimport { StateService } from 'src/app/shared/state';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-csv-header-table',\n  templateUrl: './csv-header-table.component.html',\n  styleUrls: ['./csv-header-table.component.scss']\n})\nexport class CsvHeaderTableComponent implements OnInit, AfterViewInit {\n\n  @ViewChild(MatTable, { static: false }) table: MatTable<CsvHeaderMetaRow>\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n\n  @Input()\n  index = 0\n\n  drop(event: CdkDragDrop<CsvHeaderMetaRow[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex);\n\n      const map: Map<number, CsvSelectionData> =\n        this.s.os.snapshot(this.s.os.S.CSV_DATA)\n\n      const csvData: CsvSelectionData =\n        map.get(this.index)\n\n      csvData.rows = [...event.container.data]\n      this.s.os.put(this.s.os.S.CSV_DATA, map)\n      //============================\n      //This is taken care of by emitting the data\n      //============================\n      //this.table.renderRows();\n      //==============================\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex);\n    }\n  }\n\n  selection = new SelectionModel<CsvHeaderMetaRow>(true, []);\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numRows = this.dataSource.data.length;\n    return this.selection.selected.length === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear()\n      this.dataSource.data.forEach(\n        row => {\n          row.INCLUDE = false\n        })\n    }\n    else {\n      this.dataSource.data.forEach(\n        row => {\n          this.selection.select(row)\n          row.INCLUDE = true\n        })\n    }\n  }\n\n  HEADER_COLUMN = 'HEADER'\n  HEADER_KEY = 'KEY'\n\n  COLUMNS = ['SELECT', 'HEADER', 'KEY']\n  dataSource: MatTableDataSource<CsvHeaderMetaRow> =\n    new MatTableDataSource<CsvHeaderMetaRow>([])\n\n  /**\n   * Notifies whever theres is a checkbox toggle event.\n   * \n   * Sets the at AT_LEAST_ONE_KEY_IN_EACH_TABLE_SELECTED\n   * state.\n   * \n   * @param row\n   */\n  checkboxToggleEvent(row: CsvHeaderMetaRow) {\n    this.s.os.put(\n      this.s.os.S.KEY_HEADER_CHECKBOX_TOGGLE_EVENT,\n      true)\n  }\n\n  constructor(private s: StateService) { }\n\n  ngOnInit() {\n    this.s.os.S.CSV_DATA.obs.pipe(untilDestroyed(this)).\n      subscribe((map: Map<number, CsvSelectionData>) => {\n        if (map) {\n          const CSD: CsvSelectionData = map.get(this.index)\n          if (CSD) {\n            const rows: CsvHeaderMetaRow[] = CSD.rows\n            this.dataSource.data = rows\n          }\n        }\n      })\n    //=============================================\n    // Subscribe to selection changes:\n    // this.selection.changed.subscribe(v => console.log(v))\n    //=============================================\n  }\n\n  ngAfterViewInit() {\n    //=============================================\n    // We don't use sorting\n    //=============================================\n    // this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n}","<div style=\"max-width: 40rem;\">\n    <mat-table class=\"mat-elevation-z8\"\n        style=\"min-width:22rem; \"\n        [dataSource]=\"dataSource\"\n        [cdkDropListData]=\"dataSource.data\"\n        (cdkDropListDropped)=\"drop($event)\"\n        cdkDropList\n        matSort>\n        <!-- Checkbox Column -->\n        <ng-container matColumnDef=\"SELECT\">\n            \n            <mat-header-cell mat-header-cell\n                style=\"justify-content: center; max-width: 6rem;\"\n                *matHeaderCellDef>\n                <mat-checkbox (change)=\"$event && masterToggle()\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n                </mat-checkbox>\n            </mat-header-cell>\n\n            <mat-cell mat-cell\n                style=\"justify-content: center; max-width: 6rem; \"\n                *matCellDef=\"let row\">\n                <mat-checkbox [(ngModel)]=\"row.INCLUDE\" (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event && selection.toggle(row)\"\n                    [checked]=\"selection.isSelected(row)\">\n                </mat-checkbox>\n            </mat-cell>\n        </ng-container>\n\n        <ng-container [matColumnDef]=\"HEADER_COLUMN\">\n\n            <mat-header-cell *matHeaderCellDef\n                style=\"max-width: 14rem;\"\n                mat-sort-header>\n                {{HEADER_COLUMN}}\n            </mat-header-cell>\n            \n            <mat-cell *matCellDef=\"let row;\"\n                style=\"max-width: 14rem;\">\n                {{row[HEADER_COLUMN]}}\n            </mat-cell>\n        </ng-container>\n\n        <ng-container [matColumnDef]=\"HEADER_KEY\">\n\n            <mat-header-cell \n                *matHeaderCellDef\n                style=\"max-width: 2rem;\"\n                mat-sort-header>\n                {{HEADER_KEY}}\n            </mat-header-cell>\n\n            <mat-cell *matCellDef=\"let row;\"\n                style=\"max-width: 2rem;\">\n                <mat-checkbox [(ngModel)]=\"row.KEY\"\n                    (click)=\"$event.stopPropagation()\"\n                    (change)=\"checkboxToggleEvent(row)\"\n                    [checked]=\"row.KEY\">\n                </mat-checkbox>\n            </mat-cell>\n        </ng-container>\n\n        <mat-header-row *matHeaderRowDef=\"COLUMNS\">\n        </mat-header-row>\n        <mat-row *matRowDef=\"let row; columns: COLUMNS\" cdkDrag [cdkDragData]=\"row\"></mat-row>\n    </mat-table>\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 15, 20]\"\n        [pageSize]=\"5\"\n        showFirstLastButtons></mat-paginator>\n</div>","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  Input,\n} from '@angular/core';\n\nimport { LoadCSV, CsvFile } from '@fireflysemantics/csv'\n\n@Component({\n  selector: 'app-csv-load',\n  templateUrl: './csv-load.component.html',\n  styleUrls: ['./csv-load.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CsvLoadComponent implements OnInit {\n\n  @Input()\n  meta: any = {}\n\n  @Input()\n  service:LoadCSV\n\n  private fileReader: FileReader\n\n  /**\n   * The constructor checks to see if the browser\n   * has file reader support before constructing a FileReader\n   * instance.\n   * \n   * Consider adding an error state to the state manager\n   * in the event that there is no support.\n   */\n  constructor() {\n    this.fileReader = new FileReader();\n  }\n\n  onFileChanged(event) {\n    const file: File = event.target.files[0];\n    const csvFile: CsvFile = new CsvFile()\n    csvFile.meta = this.meta\n    csvFile.name = file.name\n    csvFile.size = file.size\n    this.fileReader.onload = (e) => {\n      csvFile.data = this.fileReader.result.toString().trim();\n      this.service.loadCSV(csvFile)\n    }\n    this.fileReader.readAsText(file);\n  }\n  ngOnInit(): void { }\n}","<button style=\"margin-bottom: 1rem;\"  \n        class=\"FileButton Button\"\n  mat-stroked-button\n  color=\"accent\">\n  <mat-icon style=\"margin-right: 1rem;\">view_column</mat-icon>\n  LOAD\n  <input type=\"file\"\n    (change)='onFileChanged($event)'\n    accept='.csv'>\n</button>","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { EnabledStateService } from '../../shared/state/enabled.state.service'\nimport { DataProcessService } from '../../shared/process/data-process.service';\nimport { CsvService } from 'src/app/shared/csv.service';\nimport { TableData } from '@fireflysemantics/cdk';\nimport { StateService, ActionStateService } from 'src/app/shared/state';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-csv-composite',\n  templateUrl: './csv-process.component.html',\n  styleUrls: ['./csv-process.component.scss']\n})\nexport class CsvProcessComponent implements OnInit {\n\n  public tableData$: Observable<TableData>\n\n  constructor(\n    private s: StateService,\n    private c: DataProcessService,\n    public e: EnabledStateService,\n    public a: ActionStateService,\n    public csv: CsvService) { }\n\n  ngOnInit(): void {\n    //this.a.isResultReady$.subscribe(v => console.log('result ready is', v))\n    this.tableData$ = this.s.os.S.PROCESS_RESULT.obs\n  }\n\n  ngAfterViewInit(): void { }\n\n  process() {\n    this.c.process()\n  }\n}","<button (click)=\"process()\"\n    style=\"margin-bottom: 1rem;\"\n    class=\"FileButton Button\"\n    mat-stroked-button\n    color=\"accent\"\n    [disabled]=\"!(e.processButtonEnabled$ | async)\">\n    <mat-icon style=\"margin-right: 1rem;\">api</mat-icon>\n    PROCESS\n</button>\n\n<button class=\"Button\"\n    mat-stroked-button\n    color=\"accent\"\n    (click)=\"csv.save()\"\n    [disabled]=\"!(e.saveButtonEnabled$ | async)\">\n    <mat-icon style=\"margin-right: 1rem;\">save</mat-icon>\n    SAVE\n</button>\n\n<app-csv-errors></app-csv-errors>\n\n<div *ngIf=\"a.isResultReady$ | async\">\n    <h3>Result</h3>\n    <app-data-table [tableData$]=\"tableData$\"></app-data-table>\n</div>","/**\n * Generic TableData component\n */\nimport { Component, OnInit, AfterViewInit, ViewChild, Input } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy'\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { StateService } from '../../shared/state/state.service';\nimport { TableData } from '@fireflysemantics/cdk'\nimport { Observable } from 'rxjs';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-data-table',\n  templateUrl: './data-table.component.html',\n  styleUrls: ['./data-table.component.scss']\n})\nexport class DataTableComponent implements OnInit, AfterViewInit {\n\n  @Input()\n  tableData$: Observable<TableData>\n  /**\n   * This property contains the \n   * default consideration settings\n   * for the pager.  This allows the \n   * table to render initially.\n   */\n  tableData: TableData = new TableData()\n\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n\n  COLUMNS = []\n  dataSource: MatTableDataSource<any> = new MatTableDataSource([])\n\n  constructor(private s: StateService) {}\n\n  ngOnInit() {\n    this.tableData$.pipe(untilDestroyed(this)).subscribe((td:TableData) => {\n      if (td) {\n        this.tableData=td\n        this.COLUMNS = td.headers\n        this.dataSource.data = td.rows\n      }\n    })\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  isSticky(column: string): boolean {\n    return this.tableData.stickyHeaders.includes(column) ? true : false;\n  }\n}","<div class=\"table-container\">\n    <mat-table class=\"mat-elevation-z8\"\n        [dataSource]=\"dataSource\"\n        matSort>\n        <ng-container *ngFor=\"let c of COLUMNS\"\n            matColumnDef=\"{{c.toUpperCase()}}\"\n            [sticky]=\"isSticky(c)\">\n            <mat-header-cell *matHeaderCellDef\n                mat-sort-header>{{c.toUpperCase().split('_').join(' ')}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let row;\">{{row[c.toLowerCase()] ? row[c.toLowerCase()] : row[c.toUpperCase()]}}\n            </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"COLUMNS\">\n        </mat-header-row>\n        <mat-row *matRowDef=\"let row; columns: COLUMNS\"></mat-row>\n    </mat-table>\n    <mat-paginator [pageSizeOptions]=\"tableData.pageSizeOptions\"\n        [pageSize]=\"tableData.pageSizeDefault\"\n        showFirstLastButtons></mat-paginator>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-faq',\n  templateUrl: './faq.component.html',\n  styleUrls: ['./faq.component.scss']\n})\nexport class FaqComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>FAQ</h1>\n\n<h2>Is CVS file data transferred to your servers?</h2>\n<p>\n    None of the CSV file data used by the application\n    transferred to our servers.\n    The work is performed in the browser.\n</p>\n<h2>How much does the service cost?</h2>\n<p>\n    We are currently offering the application\n    and service for free.\n</p>","import { Component, OnInit } from '@angular/core';\nimport { SVG } from '@fireflysemantics/constants'\nimport { FormControl } from '@angular/forms';\nimport { DataService } from 'src/app/shared/data.service';\nimport { AuthService } from 'src/app/shared/auth.service';\nimport { StateService } from '../../shared/state/';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  SVG_CONSTANTS = SVG\n\n  public tosControl: FormControl = new FormControl(false)\n\n  constructor(\n    private ds: DataService,\n    private s: StateService,\n    private auth: AuthService) {\n    this.tosControl.\n      valueChanges.pipe(untilDestroyed(this)).\n      subscribe(\n        (accepted: boolean) => {\n          this.acceptTOS()\n        })\n  }\n\n  /**Accept TOS And Track the Event with GA */\n  acceptTOS() {\n    this.ds.saveTermsOfServiceAccepted()\n    this.s.os.put(\n      this.s.os.S.IS_TERMS_OF_SERVICE_ACCEPTED,\n      true)\n  }\n\n  isTOSAccepted() {\n    return this.s.os.S.IS_TERMS_OF_SERVICE_ACCEPTED.obs\n  }\n\n  login() {\n    this.auth.signInWithGoogle()\n  }\n\n  isAuthenticated() {\n    return this.s.os.S.IS_AUTHENTICATED.obs\n  }\n\n  ngOnInit(): void { }\n}","<main>\n    <div style=\"display: flex;\"\n        *ngIf=\"!( isTOSAccepted() | async)\">\n        <div class=\"TermsOfServiceCheckBox\">\n            <mat-checkbox\n                [formControl]=\"tosControl\">\n            </mat-checkbox>\n        </div>\n        <div>\n            <p class=\"u-font-cutive-mono\">I Have Reviewed and Agreed to the &nbsp;</p>\n            <a color=\"primary\"\n                mat-stroked-button\n                href=\"https://legal.fireflysemantics.com/terms-of-service/\"\n                target=\"_blank\">Terms of Service</a> <span class=\"u-font-cutive-mono\">&nbsp; and &nbsp; </span>\n            <a color=\"primary\"\n                mat-stroked-button\n                href=\"https://legal.fireflysemantics.com/privacy-policy/\"\n                target=\"_blank\">Privacy Policy</a>\n        </div>\n    </div>\n\n    <br>\n    <div *ngIf=\"!( isAuthenticated() | async)\">\n        <button [disabled]=\"!(isTOSAccepted() | async)\"\n            (click)=\"login()\"\n            mat-button\n            style=\"padding: 1rem;\">\n            <mat-icon class=\"GoogleIcon\"\n                [svgIcon]=\"SVG_CONSTANTS.GOOGLE_LOGO.name\"></mat-icon> &nbsp; &nbsp; Login With Google\n        </button>\n    </div>\n</main>","import { Component, OnInit } from '@angular/core';\n\nexport const ISSUES_URL = 'https://github.com/fireflysemantics/csv-discussion/issues'\n\n\n@Component({\n  selector: 'app-support',\n  templateUrl: './support.component.html',\n  styleUrls: ['./support.component.scss']\n})\nexport class SupportComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  issuesTab(e: Event) {\n    e.stopPropagation()\n    window.open(ISSUES_URL, '_blank');\n  }\n}\n","<h1>Support</h1>\n<p class=\"u-font-cutive-mono\">\n    For questions or support please create an issue in our\n    publicly viewable\n    discussion\n    <button mat-button\n        color=\"primary\"\n        (click)=\"issuesTab($event)\">Discussion</button> Github Repository.\n</p>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ROUTES, MenuItems } from '../../../shared/model';\nimport { StateService } from '../../../shared/state/state.service';\nimport { AuthService } from '../../../shared/auth.service';\n\n@Component({\n  selector: 'app-toolbar-menu',\n  templateUrl: './toolbar-menu.component.html',\n  styleUrls: ['./toolbar-menu.component.scss']\n})\nexport class ToolbarMenuComponent implements OnInit {\n  menuItems = MenuItems\n  ROUTES = ROUTES\n\n  isAuthenticated() {\n    return this.s.os.S.IS_AUTHENTICATED.obs\n  }\n\n  constructor(\n    public s: StateService,\n    public r: Router,\n    private auth: AuthService) { }\n  onMenuClick(menu: string) {\n    switch (menu) {\n      case MenuItems.APPLICATION:\n        this.r.navigate([ROUTES.APPLICATION])\n        break;\n      case MenuItems.WELCOME:\n        this.r.navigate([ROUTES.WELCOME])\n        break;\n      case MenuItems.LOGIN:\n        this.login()\n        break;\n      case MenuItems.LOGOUT:\n        this.logout()\n        break;\n    }\n    //IN case anything else needs to react \n    //to the currently active menu.\n    this.s.os.put(this.s.os.S.ACTIVE_MENU, menu)\n  }\n\n  login() {\n    const isTermOfServiceAccepted =\n      this.s.os.snapshot(\n        this.s.os.S.IS_TERMS_OF_SERVICE_ACCEPTED)\n\n    isTermOfServiceAccepted\n      ?\n      this.auth.signInWithGoogle()\n      :\n      this.r.navigate([ROUTES.LOGIN])\n  }\n\n  logout() {\n    this.auth.signOut()\n  }\n\n  ngOnInit(): void {\n  }\n}","<button mat-icon-button\n    [matMenuTriggerFor]=\"menu\">\n    <mat-icon>more_vert</mat-icon>\n</button>\n\n<mat-menu #menu=\"matMenu\">\n    <button [disabled]=\"!(isAuthenticated() | async)\"\n        (click)=\"onMenuClick(menuItems.APPLICATION)\"\n        mat-menu-item\n        [innerHtml]=\"menuItems.APPLICATION\"></button>\n    <button (click)=\"onMenuClick(menuItems.WELCOME)\"\n        mat-menu-item\n        [innerHtml]=\"menuItems.WELCOME\"></button>\n\n    <button *ngIf=\"!(isAuthenticated() | async)\"\n        (click)=\"onMenuClick(menuItems.LOGIN)\"\n        mat-menu-item\n        [innerHtml]=\"menuItems.LOGIN\"></button>\n    <button *ngIf=\"isAuthenticated() | async\"\n        (click)=\"onMenuClick(menuItems.LOGOUT)\"\n        mat-menu-item\n        [innerHtml]=\"menuItems.LOGOUT\"></button>\n    <button [routerLink]=\"ROUTES.FAQ\"\n        (click)=\"onMenuClick(menuItems.FAQ)\"\n        mat-menu-item\n        [innerHtml]=\"menuItems.FAQ\"></button>\n    <button [routerLink]=\"ROUTES.SUPPORT\"\n        (click)=\"onMenuClick(menuItems.SUPPORT)\"\n        mat-menu-item\n        [innerHtml]=\"menuItems.SUPPORT\"></button>\n\n    <!--\n\n    <button [routerLink]=\"'/transactions'\"\n        (click)=\"onMenuClick(menuItems.TRANSACTIONS)\"\n        mat-menu-item\n        [innerHtml]=\"menuItems.TRANSACTIONS\"></button>\n\n    <button mat-menu-item\n        [matMenuTriggerFor]=\"documentation\">Documentation</button>\n    <mat-menu #documentation=\"matMenu\">\n        <a href=\"https://help-service-parts.fireflysemantics.com/\"\n            target=\"_blank\"><button mat-menu-item>Help Center</button></a>\n    </mat-menu>\n-->\n\n    <button mat-menu-item\n        [matMenuTriggerFor]=\"policies\">Policies</button>\n    <mat-menu #policies=\"matMenu\">\n        <a href=\"https://legal.fireflysemantics.com/privacy-policy/\"\n            target=\"_blank\"><button mat-menu-item>Privacy Policy</button></a>\n        <a href=\"https://legal.fireflysemantics.com/terms-of-service/\"\n            target=\"_blank\"><button mat-menu-item>Terms of Service</button></a>\n    </mat-menu>\n</mat-menu>","import { Component, OnInit } from '@angular/core';\nimport { SVG } from '@fireflysemantics/constants';\nimport { ROUTES } from '../../shared/model'\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss']\n})\nexport class ToolbarComponent implements OnInit {\n\n  SVG_CONSTANTS = SVG\n  ROUTES = ROUTES\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}","<mat-toolbar style=\"justify-content: space-between;\">\n    <button mat-button\n        [routerLink]=\"[ROUTES.APPLICATION]\"\n        style=\"padding: 1rem;\">\n        <mat-icon style=\"width: 42px; height:42px; font-size: 42px\">view_column</mat-icon>\n        &nbsp; &nbsp; CSV        \n    </button>\n    <app-toolbar-menu></app-toolbar-menu>\n</mat-toolbar>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { StateService } from '../../shared/state/state.service'\nimport { ROUTES } from '../../shared/model'\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.scss']\n})\nexport class WelcomeComponent implements OnInit {\n\n  constructor(public s: StateService, private r: Router) { }\n\n  ngOnInit(): void { }\n\n  goToApplication() {\n    this.r.navigate([ROUTES.APPLICATION])\n  }\n}\n","<br>\n<br>\n<h1 class=\"FSLetterLogo\"\n    style=\"margin-bottom: 2rem;\">FS\n    <span class=\"CSVLetterLogo\">CSV</span>\n</h1>\n<h2>\n    Combine Data from Different CSV Files\n</h2>\n<p>\n    Match the rows of multiple CSV\n    files by key or compound key and\n    select the result columns that the\n    output file should have.\n</p>\n<h2>\n    Reorder Columns\n</h2>\n<p>\n    Drag and Drop the coluns to reorder them.\n</p>\n<h2>\n    Parser Error Detection\n</h2>\n<p>\n    Detects and displays parser\n    errors in your CSV files on load.\n</p>\n\n<h2>\n    Key Validation\n</h2>\n<p>\n    Verify that the columns that hold\n    key values have value that are defined.\n</p>\n\n<h2>\n    Compound or Single Header Key Uniqueness\n</h2>\n<p>\n    Verify that compound or single header keys\n    are unqiue.\n</p>\n\n<h2>\n    Cross Table Referential Integrity\n</h2>\n<p>\n    Verify that the keys in one table\n    having matching keys in another.\n</p>\n\n<p>\n    Click here for a\n    <a mat-button\n        href=\"https://medium.com/@ole.ersoy/introducing-firefly-semantics-csv-4e7028af5ca4\"\n        target=\"_blank\">basic tutorial</a>\n</p>\n<app-login></app-login>","import { Injectable } from '@angular/core';\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { SVG } from '@fireflysemantics/constants'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AssetService {\n\n  constructor(\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer) {\n    {\n       this.matIconRegistry.addSvgIcon(\n        SVG.GOOGLE_LOGO.name,\n        this.domSanitizer.bypassSecurityTrustResourceUrl(SVG.GOOGLE_LOGO.url));\n    }\n  }\n}","/**\n * When someone arrives to the application \n * before they are allowed to proceed to the \n * application they must be authenticated.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators'\nimport { StateService } from './state/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private s: StateService) { }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return this.s.os.S.IS_AUTHENTICATED.obs.pipe(map(authenticated => {\n      if (!authenticated) {\n        this.router.navigate([''])\n        return false;\n      }\n      return true;\n    }))\n  }\n}","import { Injectable } from '@angular/core'\nimport Auth, { CognitoHostedUIIdentityProvider } from '@aws-amplify/auth'\nimport { ICredentials, Hub } from '@aws-amplify/core'\nimport { StateService } from './state/state.service'\nimport { ROUTES } from './model'\nimport { Router } from '@angular/router'\nimport { User, AMPLIFY_HUB_EVENTS } from '@fireflysemantics/amplify'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  public static GOOGLE = CognitoHostedUIIdentityProvider.Google\n\n  constructor(\n    private s: StateService,\n    private r: Router) {\n    this.initializeAuthState()\n    this.initializeUser()\n    this.redirectToApplication()\n  }\n\n  signOut(): Promise<any> {\n    return Auth.signOut()\n      .then(() => this.s.os.post(this.s.os.S.IS_AUTHENTICATED, false))\n  }\n\n  socialSignIn(provider: CognitoHostedUIIdentityProvider): Promise<ICredentials> {\n    return Auth.federatedSignIn({\n      'provider': provider\n    });\n  }\n\n  signInWithGoogle() {\n    this.socialSignIn(AuthService.GOOGLE);\n  }\n\n  initializeAuthState() {\n    Auth.currentAuthenticatedUser().\n      then((u) => {\n        this.s.os.put(this.s.os.S.IS_AUTHENTICATED, true)\n      }).catch(() => {\n        Hub.listen('auth', (data) => {\n          const { channel, payload } = data\n          if (channel === 'auth') {\n            this.s.os.put(\n              this.s.os.S.IS_AUTHENTICATED,\n              payload.event == AMPLIFY_HUB_EVENTS.SIGN_OUT ? false : true)\n          }\n        })\n      })\n  }\n\n  redirectToApplication() {\n    this.s.os.S.IS_AUTHENTICATED.obs.subscribe(auth => {\n      auth && this.r.navigate([ROUTES.APPLICATION])\n//        auth && this.r.navigate([{outlets: { application: 'application'}}])\n    })\n  }\n\n  async initializeUser() {\n    const user = await Auth.currentUserInfo()\n    if (user) {\n      const { email, name, given_name, family_name } = user.attributes\n      const u: User = { email, name, given_name, family_name }\n      this.s.os.put(this.s.os.S.USER, u)\n    }\n  }\n\n  /**\n   * We need to keep the user session\n   * fresh so that credit card transactions\n   * are guaranteed to connect.\n   */\n  async keepSessionFresh() {\n    /*\n    const cognitoUser = await Auth.currentAuthenticatedUser();\n    const currentSession = await Auth.currentSession();\n    await cognitoUser.refreshSession(\n        currentSession.refreshToken, \n        (err, session) => {});*/\n  }\n}","import { Injectable, ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory } from '@angular/core';\nimport { CsvHeaderSelectionComponent } from '../components/csv-header-selection/csv-header-selection.component';\nimport { deleteAndDecrement } from '@fireflysemantics/collections'\nimport { StateService } from './state/state.service';\nimport { CsvSelectionData } from './model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentDataService {\n\n  //==================================\n  // The index that can be assigned\n  // to a newly created component\n  //==================================\n\n  index: number = 0\n\n  //==================================\n  // Map of index to ComponentRef instance\n  //==================================\n  map: Map<number, ComponentRef<CsvHeaderSelectionComponent>> = new Map()\n\n  VCR: ViewContainerRef;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private s: StateService) { }\n\n  createComponent() {\n    const factory: ComponentFactory<CsvHeaderSelectionComponent> =\n      this.resolver.resolveComponentFactory(CsvHeaderSelectionComponent);\n    const componentRef: ComponentRef<CsvHeaderSelectionComponent> = this.VCR.createComponent(factory);\n\n    componentRef.instance.index = this.index;\n    this.map.set(this.index, componentRef)\n    this.index++\n  }\n\n  destroyComponent(index: number) {\n\n    const componentRef: ComponentRef<CsvHeaderSelectionComponent> = this.map.get(index)\n    componentRef.destroy()\n    deleteAndDecrement(this.map, index)\n    //====================================\n    // Remap the component indexes also\n    //====================================\n    this.map.forEach((v, k) => {\n      v.instance.index = k\n    })\n    const dataMap: Map<number, CsvSelectionData> = this.s.os.snapshot(this.s.os.S.CSV_DATA)\n\n    //====================================\n    // Update the data map.\n    // We check if it is created\n    // because components can be display\n    // but they may not have loaded data\n    //====================================\n    if (dataMap && dataMap.size) {\n      if (dataMap.get(index)) {\n        deleteAndDecrement(dataMap, index)\n      }\n    }\n\n    //====================================\n    // Decrement the index because we \n    // removed a component\n    //====================================\n    this.index--\n    //====================================\n    // Update events that depend on observing\n    // changes to the dataMap\n    //====================================\n    this.s.os.put(this.s.os.S.CSV_DATA, dataMap)\n  }\n\n  /**\n   * Destroy all table header container components\n   * and clear the data map.\n   * \n   * This is called by the application component\n   * in the ngOnDestroy method.\n   */\n  reset() {\n    this.map && \n    this.map.forEach((ref: ComponentRef<CsvHeaderSelectionComponent>) => {  \n      ref && ref.destroy();\n    });\n    this.map && this.map.clear()\n    const dataMap: Map<number, CsvSelectionData> = \n    this.s.os.snapshot(this.s.os.S.CSV_DATA)\n    dataMap && dataMap.clear()\n  }\n}","import { Injectable } from '@angular/core';\nimport { StateService } from './state/state.service';\nimport { CSV_PARSE_ERROR_COLUMNS, CsvFile, writeCSV } from '@fireflysemantics/csv'\nimport { TableData } from '@fireflysemantics/cdk'\nimport { ParseResult, ParseError } from 'papaparse';\nimport { CsvHeaderMetaRow, CsvSelectionData, IndexedMetaError, ERROR_TYPE_ENUM } from './model';\nimport { cuidSlug } from '@fireflysemantics/cuid'\nimport { saveAs } from 'file-saver'\nimport { trimObjectValues } from '@fireflysemantics/collections'\n\n//=====================================\n//Test parser errors locally\n//=====================================\n//import { parserError } from 'CSV-TEST-FILES/test-errors';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsvService {\n\n  csvDataMap: Map<number, CsvSelectionData> = new Map()\n\n  constructor(private s: StateService) { }\n\n  save() {\n    const result: TableData =\n      this.s.os.snapshot(this.s.os.S.PROCESS_RESULT)\n\n\n    //==============================\n    // Create the CSV String\n    //===============================\n    const csv = writeCSV(result.rows)\n    //console.log(csv)\n    const blob = new Blob([csv], { type: \"text/plain;charset=utf-8\" })\n    const fileName = `csv-${cuidSlug()}.csv`\n    saveAs(blob, fileName)\n  }\n\n  loadCSV(\n    csvFile: CsvFile): ParseResult<any> {\n    const index = csvFile.meta.index\n    const worker = new Worker('./csv.worker', { type: 'module' })\n    let parseResult: ParseResult<any>\n\n    worker.postMessage(csvFile.data)\n    worker.onmessage = ({ data }: { data: ParseResult<any> }) => {\n      parseResult = data\n\n      //====================================\n      // Reset the error state\n      // by emitting null\n;      //====================================\n      this.s.resetErrorState()\n\n      const parseErrors: ParseError[] = data.errors\n\n      //====================================\n      // Check for parser errors\n      //====================================\n      if (parseErrors.length) {\n        \n        const IME:IndexedMetaError = new IndexedMetaError()\n        IME.type = ERROR_TYPE_ENUM.PARSER_ERROR\n        IME.tableData.rows = parseErrors\n        IME.tableData.headers = CSV_PARSE_ERROR_COLUMNS\n        this.s.os.put(\n          this.s.os.S.LOAD_AND_PROCESSING_ERRORS,\n          IME)\n        return data\n      }\n\n      const headers: string[] = data.meta.fields\n      const csvHeaderRows: CsvHeaderMetaRow[] = []\n\n      headers.forEach(h => {\n        csvHeaderRows.push(new CsvHeaderMetaRow(h))\n      })\n\n      csvFile.rowCount = data.data.length\n\n      //====================================\n      // Trim string values\n      //====================================\n      data.data.forEach((entity: any) => {\n        trimObjectValues(entity)\n      })\n\n      const csvData = new CsvSelectionData(\n        csvFile,\n        csvHeaderRows,\n        new TableData(data.data, headers))\n\n      this.csvDataMap.set(index, csvData)\n\n      this.s.resetErrorState()\n      this.s.os.put(\n        this.s.os.S.CSV_DATA,\n        this.csvDataMap)\n    }\n    return parseResult\n  }\n}","import { Injectable, OnDestroy } from '@angular/core'\nimport { StateService } from './state/';\nimport { LOCAL_STORAGE_KEYS } from './model/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService implements OnDestroy {\n\n  /**\n   * Initializes the sku string\n   * for creating the save when\n   * the `IOptimizationParameters` have\n   * been completed.\n   */\n  constructor(private s: StateService) {\n    this.initializeTermsOfServiceAccepted()\n  }\n\n  saveTermsOfServiceAccepted() {\n    localStorage.setItem(LOCAL_STORAGE_KEYS.TOS_ACCEPTED, 'true')\n  }\n\n  isTermsOfServiceAccepted() {\n    return !!localStorage.getItem(LOCAL_STORAGE_KEYS.TOS_ACCEPTED)\n  }\n  ngOnDestroy(): void { }\n\n  initializeTermsOfServiceAccepted() {\n    if (this.isTermsOfServiceAccepted()) {\n      this.s.os.put(this.s.os.S.IS_TERMS_OF_SERVICE_ACCEPTED, true)\n    }\n  }\n}","// material.module.ts\nimport { ModuleWithProviders, NgModule} from \"@angular/core\";\nimport { MAT_LABEL_GLOBAL_OPTIONS, MatNativeDateModule, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\n\nconst mm = [\n  MatAutocompleteModule,\n  MatBadgeModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatStepperModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatExpansionModule,\n  MatFormFieldModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatTreeModule,\n  MatNativeDateModule\n]\n\n@NgModule({\n    imports: [ ...mm ],\n    exports: [...mm\n    ],\n    providers: [     \n    ]\n})\nexport class MaterialModule {\n    constructor(public matIconRegistry: MatIconRegistry) {\n        // matIconRegistry.registerFontClassAlias('fontawesome', 'fa');\n    }\n\n    static forRoot(): ModuleWithProviders<MaterialModule> {\n        return {\n            ngModule: MaterialModule,\n            providers: [MatIconRegistry]\n        }\n    }\n}","export class CsvHeaderMetaRow {\n    public KEY: boolean = false\n    public INCLUDE: boolean = false\n    constructor(public HEADER?: string) { }\n}\n","import { mapObject, arrayToMap } from '@fireflysemantics/collections'\nimport { TableData } from '@fireflysemantics/cdk'\nimport { CsvFile } from '@fireflysemantics/csv'\nimport { CsvHeaderMetaRow } from './CsvHeaderMetaRow'\n\nexport class CsvSelectionData {\n    public mappedData: TableData\n    public compoundKeyMap: Map<string, any> = new Map()\n\n    /**\n     * We drop in instances of `CsvHeaderMetaRow`\n     * after having read in the CSV file.  We grab\n     * the headers from that and create the \n     * `CsvHeaderMetaRow` instances.\n     */\n    constructor(\n        public meta: CsvFile,\n        public rows: CsvHeaderMetaRow[],\n        public tableData: TableData\n    ) { }\n\n    public getKeyHeaders(): string[] {\n        return this.rows.filter(r => r.KEY).\n            map(r => r.HEADER).map(h => h && h.trim())\n    }\n\n    public getSelectedHeaders(): string[] {\n        return this.rows.filter(r => r.INCLUDE).\n            map(r => r.HEADER).map(h => h && h.trim())\n    }\n\n    /**\n     * We should refresh the state any time we \n     * \n     * Run validateKeys before initializing the state because\n     * we want to make sure the loaded CSV has valid keys for all\n     * the rows prior to creating compound keys and \n     * mapping the objects.\n     */\n    indexAndMap() {\n        this.indexData()\n        this.mapData()\n        return this\n    }\n\n    /**\n     * This method can be called with\n     * or without keys selected.\n     * \n     * This maps the CSV data\n     * to the headers fields selected,\n     * \n     * Once complete the mappedData:TableData\n     * fields are initialized.\n     * \n     * These include:\n     * mappedData.rows\n     * mappedData.headers\n     * \n     * The `mappedData.rows` objects \n     * can now be assembled with the other\n     * tables or saved if there is just one table.\n     * \n     * Note that for assembly to occur keys should be \n     * selected.  We do support the use case of just saving \n     * columns.\n     * \n     * This is only when operating on a single table.\n     */\n    mapData() {\n        if (this.compoundKeyMap && this.compoundKeyMap.size) {\n            if (this.getSelectedHeaders().length) {\n                [...this.compoundKeyMap.keys()].forEach(k => {\n                    const v = this.compoundKeyMap.get(k)\n                    const mapped = mapObject(v, this.getSelectedHeaders())\n                    this.compoundKeyMap.set(k, mapped)\n                })\n                this.mappedData = new TableData()\n                this.mappedData.rows = [...this.compoundKeyMap.values()]\n                this.mappedData.headers = this.getSelectedHeaders()\n            }\n        }\n        //==========================================\n        // Support the use case where\n        // we only have a single table and we \n        // want to map columns only.\n        //==========================================\n        else if (this.getSelectedHeaders().length) {\n            const rows = []\n            this.mappedData = new TableData()\n            this.mappedData.headers = this.getSelectedHeaders()\n            this.tableData.rows.forEach(v => {\n                rows.push(mapObject(v, this.getSelectedHeaders()))\n            })\n        }\n    }\n\n    /**\n     * Creates the compound key map\n     * of the original CSV data rows.\n     */\n    public indexData() {\n        if (this.getKeyHeaders().length) {\n            this.compoundKeyMap = arrayToMap(\n                this.tableData.rows,\n                this.getKeyHeaders())\n        }\n    }\n}","import { TableData } from \"@fireflysemantics/cdk\"\nimport { CsvSelectionData } from \"./CsvSelectionData\"\n\n/**\n * The `CsvSelectionDataAssemblyContainer`\n * should be used when there is more than one\n * table.\n * \n * This calls createAssemblyHeaders in the constructor\n * so that they will be availble on `assembly`. \n * \n * Note that `CsvSelectionData.refreshState()`\n * should be called on the `dataMap` instance\n * before it is passed in.\n */\nexport class CsvSelectionDataAssemblyContainer {\n\n    compoundKeys: string[]\n    assembly: TableData\n\n    constructor(public dataMap: Map<number, CsvSelectionData>) {\n\n        this.assembly = new TableData()\n\n        if (dataMap && dataMap.size) {\n\n            //=====================================\n            // Compound Keys come from the first\n            // CsvSelectionData instance on the map\n            //\n            // The compound keys should be the same\n            // across the CsvSelectionData instances.\n            //=====================================\n\n            this.compoundKeys = [...this.dataMap.get(0).compoundKeyMap.keys()]\n\n            this.createAssemblyHeaders()\n            if (this.hasAssemblyHeaders()) {\n                this.assembly.rows = this.createAssemblyRows()\n            }\n        }\n    }\n\n    createAssemblyRows() {\n        const assemblyRows = []\n        this.compoundKeys.forEach(ck => {\n            let assemblyObject = {}\n            this.dataMap.forEach(v => {\n                if (v.getSelectedHeaders().length) {\n                    const o = v.compoundKeyMap.get(ck)\n                    assemblyObject = {\n                        ...assemblyObject,\n                        ...o\n                    }\n                }\n            })\n            console.log(assemblyObject)\n            assemblyRows.push(assemblyObject)\n        })\n        console.log(assemblyRows)\n        return assemblyRows\n    }\n\n    createAssemblyHeaders() {\n        let headers = []\n        this.dataMap && this.dataMap.forEach(v => {\n            headers = [...headers, ...v.getSelectedHeaders()]\n        })\n        this.assembly.headers = headers\n        return headers\n    }\n\n    /**\n     * This method can be called to \n     * check whether assembly headers exists.\n     * \n     * If they don't no assembly is created so \n     * the result does not need to be emitted.\n     */\n    hasAssemblyHeaders() {\n        return !!this.assembly.headers.length\n    }\n}","import { CsvFile } from '@fireflysemantics/csv'\nimport { RowKeyError } from '@fireflysemantics/error'\nimport { TableData } from '@fireflysemantics/cdk'\n/**\n * Enum for tables containing dimension data.\n */\nexport enum ERROR_TYPE_ENUM {\n    PARSER_ERROR,\n    KEY_HEADER_ERROR,\n    SELECTED_HEADER_ERROR,\n    DUPLICATES_ERROR,\n    UNDEFINED_KEY_VALUE_ERROR,\n    REFERENTIAL_INTEGRITY_ERROR,\n    DATA_ERROR\n}\n\n/**\n * When we are checking that \n * column values used as keys\n * are not empty strings ('', '    '), \n * or null or undefined.\n */\nexport const FILE_ROW_KEY_ERROR_COLUMNS = ['FILE_NAME', 'FIELD', 'ROW']\nexport class FileRowKeyError extends RowKeyError {\n    constructor(\n        public FIELD: string,\n        public ROW: string,\n        public FILE_NAME: string) {\n        super(FIELD, ROW)\n    }\n}\n\n/**\n * If a row is a duplicate of another then this error captures\n * that.  \n */\nexport const FILE_ROW_DULICATES_ERROR_COLUMNS = ['FILE_NAME', 'ROW']\n\nexport class FileRowDuplicatesError {\n    constructor(\n        public ROW: string,\n        public FILE_NAME: string) {\n    }\n}\n\n/**\n * Container of the errors of a certain type from all the tables.\n */\nexport class IndexedMetaError {\n    public indexedMeta: Map<number, CsvFile> = new Map()\n    public type: ERROR_TYPE_ENUM\n    public indexErrors: Map<number, any[]> = new Map()\n    public tableData: TableData = new TableData()\n}\n\n/**\n * In order to check for missing column keys\n * in tables, we first produce a global set\n * from all the checked keys.  \n * \n * Then we check if each table has them all.\n * \n * If a table is missing a key, this error will reflect hat.\n */\nexport const MISSING_KEY_HEADER_ERROR_COLUMNS = ['FILE_NAME', 'HEADER']\n\nexport class MissingKeyHeaderError {\n    constructor(\n        public FILE_NAME: string,\n        public HEADER: string) { }\n}\n\nexport const DUPLICATE_SELECTED_HEADER_ERROR_COLUMNS = ['FILE_NAME', 'HEADER']\n/**\n * Same as the MissingKeyHeaderError\n * ad shares the columns.\n */\nexport class DuplicateSelectedHeaderError {\n    constructor(\n        public FILE_NAME: string,\n        public HEADER: string) { }\n}\n\n\n/**\n * We produce a global set of keys that spans all tables.\n * \n * The we check if each table has an object that matches\n * the key.  If a table is missing the object, this error\n * capture that.\n */\nexport const MISSING_OBJECT_ERROR_COLUMNS = ['FILE_NAME', 'KEY']\n\nexport class MissingObject {\n    constructor(\n        public KEY: string,\n        public FILE_NAME: string) { }\n}","export * from './routes'\nexport * from './menus'\nexport * from '../validation/rowConverter'\nexport * from './error'\nexport * from './CsvSelectionData'\nexport * from './CsvSelectionDataAssemblyContainer'\nexport * from './CsvHeaderMetaRow'\nexport * from './localstorage'","export const LOCAL_STORAGE_KEYS = {\n    APPLICATION_CONFIG: 'APPLICATION_CONFIG',\n    TOS_ACCEPTED: 'TOS_ACCEPTED'\n}\n","/**\n * The model for menu items\n * has to live here so that we \n * don't get circular dependency \n * warnings.\n */\nexport enum MenuItems {\n    NONE = 'none',\n    APPLICATION = 'Application',\n    WELCOME = 'Welcome',\n    LOGIN = 'Login',\n    LOGOUT = 'Logout',\n    TRANSACTIONS = 'Transactions',\n    FAQ = 'FAQ',\n    SUPPORT = 'Support',\n    SAVE = 'Save'\n}","export enum ROUTES {\n    APPLICATION = '/application',\n    WELCOME = '/welcome',\n    LOGIN = '/login',\n    FAQ = '/faq',\n    SUPPORT = '/support'\n}","import { Injectable } from '@angular/core';\nimport { StateService } from '../state/state.service';\nimport { CsvSelectionData } from '../model';\nimport { ValidationService } from '../validation/validation.service';\nimport { processSingleTable } from './processSingleTable'\nimport { processMultipleTables } from './processMultipleTables'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataProcessService {\n\n  constructor(\n    private s: StateService,\n    private v: ValidationService) { }\n\n  /**\n   * Processes the CSV Data\n   */\n  process(): boolean {\n\n    //===================================\n    // Set the result to null such that\n    // the table component is destroyed \n    // and recreated by the ngIf statement.\n    //\n    // Also the save enabled state is reset.\n    //===================================\n\n    this.s.os.put(\n      this.s.os.S.PROCESS_RESULT,\n      null)\n\n    //========================================\n    // Retrieve the selection data\n    //========================================\n    const dataMap: Map<number, CsvSelectionData> =\n      this.s.os.snapshot(this.s.os.S.CSV_DATA)\n\n    if (dataMap.size == 1) {\n      return processSingleTable(dataMap, this.s, this.v)\n    }\n    return processMultipleTables(dataMap, this.s, this.v)\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}","import { StateService } from '../state';\nimport { CsvSelectionData, CsvSelectionDataAssemblyContainer } from '../model';\nimport { ValidationService } from '../validation';\nimport { isAtLeastOneHeaderSelected, isAtLeastOneKeySelected } from '../validation'\n\nexport function processMultipleTables(\n    dataMap: Map<number, CsvSelectionData>,\n    s: StateService,\n    v: ValidationService) {\n\n    //======================================\n    // Check that the key headers match\n    //======================================\n    // DESCRIPTION\n    //========================================\n    // We do this by producing a cross section\n    // set of keys and then checking that keyset\n    // across all the tables.\n    //========================================\n    // EXAMPLE\n    //========================================\n    // Table 1 has the key SKU\n    // Table 2 has the key LOCATION\n    // The cross section keyset is [LOCATION, SKU]\n    // Table 1 is missing LOCATION\n    // Table 2 is missing SKU\n    //========================================\n\n    if (v.checkMatchingKeyHeaders(\n        dataMap,\n        s.os.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //======================================\n    // Check that the headers selected \n    // are unique across tables.\n    //======================================\n    if (v.checkUnqiueSelectedHeaders(\n        dataMap,\n        s.os.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //======================================\n    // Check that the key values are defined\n    //======================================\n    if (v.checkKeyValues(\n        dataMap,\n        s.os.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //========================================\n    // Check for duplicate compound keys\n    //========================================\n    // EXAMPLE\n    //========================================\n    // Suppose table 1 has two keys\n    // ChicagoFS1\n    // ChicagoFS1\n    // This would cause incorrect mapping so it\n    // is flagged\n    //========================================\n\n    //======================================\n    // Check the compound keys are unique \n    //======================================\n    if (v.checkCompoundKeyUniqueness(\n        dataMap,\n        s.os.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //======================================\n    // Map the Data\n    //======================================\n    dataMap.forEach(v => {\n        v.indexAndMap()\n    })\n\n\n    //======================================\n    // Check referential integrity \n    //======================================\n    if (v.checkReferentialIntegrity(dataMap, s.os.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //======================================\n    // Toaster Notification\n    // that the referential integrity\n    // check passed.\n    //======================================\n    const onlyKeysSelected =\n        isAtLeastOneKeySelected(dataMap) &&\n        !isAtLeastOneHeaderSelected(dataMap)\n\n\n    if (onlyKeysSelected) {\n\n    }\n\n    //========================================\n    // No errors so reset error state\n    //========================================\n    s.os.put(\n        s.os.S.LOAD_AND_PROCESSING_ERRORS,\n        null)\n\n    //========================================\n    // Perform the Assembly\n    //========================================\n    const CSDAC = new CsvSelectionDataAssemblyContainer(dataMap)\n\n    //========================================\n    // Initialize the sticky headers\n    //========================================\n    CSDAC.assembly.stickyHeaders = \n    dataMap.get(0).getKeyHeaders()\n\n    if (CSDAC.hasAssemblyHeaders()) {\n        s.os.put(\n            s.os.S.PROCESS_RESULT,\n            CSDAC.assembly)\n    }\n    return true\n}","import { StateService } from '../state';\nimport { CsvSelectionData } from '../model';\nimport { ValidationService } from '../validation/';\n\nexport function processSingleTable(\n    dataMap: Map<number, CsvSelectionData>,\n    s: StateService,\n    v: ValidationService) {\n    //======================================\n    // Check that the key values are defined\n    //======================================\n    if (v.checkKeyValues(\n        dataMap, \n        s.os.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //======================================\n    // Check that compound keys are unique \n    //======================================\n    // EXAMPLE\n    //========================================\n    // Suppose table 1 has two keys\n    // ChicagoFS1\n    // ChicagoFS1\n    // This would cause incorrect mapping so it\n    // is flagged\n    //========================================\n    if (v.checkCompoundKeyUniqueness(\n        dataMap, \n        s.os.S.LOAD_AND_PROCESSING_ERRORS)) {\n        return false\n    }\n\n    //======================================\n    // Map the Data\n    //======================================\n    dataMap.forEach(v => {\n        v.indexAndMap()\n    })\n\n    const selectionData = dataMap.get(0)\n\n    if (selectionData.getSelectedHeaders().length) {\n        selectionData.mappedData.stickyHeaders = \n        selectionData.getKeyHeaders() ? \n        selectionData.getKeyHeaders() : []\n\n\n        s.os.put(\n            s.os.S.PROCESS_RESULT,\n            selectionData.mappedData)\n    }\n    return true\n}","import { Injectable } from '@angular/core';\nimport { StateService } from './state.service'\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActionStateService {\n  public isResultReady$: Observable<boolean>\n\n  constructor(private s: StateService) {\n    this.isResultReady()\n  }\n\n  /**\n   * The save button will\n   * be enabled if \n   * there is exists a PROCESS_RESULT.\n   */\n  isResultReady() {\n    this.isResultReady$ =\n      this.s.os.S.PROCESS_RESULT.obs.pipe(\n        map(r => {\n          return !!r\n        }))\n  }\n}","import { Injectable } from '@angular/core';\nimport { StateService } from './state.service'\nimport { Observable, combineLatest } from 'rxjs';\nimport { CsvSelectionData } from '../model'\nimport { map } from 'rxjs/operators'\nimport { isAtLeastOneKeySelected } from '../validation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnabledStateService {\n  public processButtonEnabled$: Observable<boolean>\n  public saveButtonEnabled$: Observable<boolean>\n\n  constructor(private s: StateService) {\n    this.isProcessButtonEnabled()\n    this.isSaveButtonEnabled()\n  }\n\n  /**\n   * The process button will\n   * be enabled if the data map size is 1\n   */\n  isProcessButtonEnabled() {\n    this.processButtonEnabled$ = combineLatest(\n      this.s.os.S.CSV_DATA.obs,\n      this.s.os.S.KEY_HEADER_CHECKBOX_TOGGLE_EVENT.obs,\n      (dataMap: Map<number, CsvSelectionData>) => {\n        if (dataMap && dataMap.size == 1) {\n          return true\n        }\n        if (dataMap && dataMap.size > 1) {\n          return isAtLeastOneKeySelected(dataMap)\n        }\n        return false\n      })\n  }\n\n  /**\n   * The save button will\n   * be enabled if \n   * there is exists a PROCESS_RESULT.\n   */\n  isSaveButtonEnabled() {\n    this.saveButtonEnabled$ =\n      this.s.os.S.PROCESS_RESULT.obs.pipe(\n        map(r => {          \n          return !!r}))\n  }\n}","export * from './play.state.service'\nexport * from './enabled.state.service'\nexport * from './state.service'\nexport * from './action.state.service'","/**\n * Tab Event Changes\n * https://stackoverflow.com/questions/52589504/angular-how-to-catch-mat-tab-changed-event\n */\nimport { Injectable } from '@angular/core'\nimport { StateService } from './state.service'\nimport { CsvService } from '../csv.service'\nimport { ParseResult } from 'papaparse'\nimport { RowError, CSV_DIMENSION_ERROR_TYPE_ENUM } from '@fireflysemantics/csv'\nimport { parserError } from '../../../../CSV-TEST-FILES/test-errors'\nimport { EnabledStateService } from './enabled.state.service'\n\nconst ss = `\nLOCATION, SKU, LEAD_TIME_DAYS, SERVICE_LEVEL, FORECAST_BUCKET, MAD\nChicago,  FS1,     30,           0.9,               WEEK,       10\nNew York, FS2,     42,           0.9,               WEEK,       10\nBoston,   FS3,     42,           0.9,               WEEK,       10\n`\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayService {\n  constructor(\n    private s: StateService,\n    private cs: CsvService,\n    private e: EnabledStateService) {\n\n\n    //    this.s.os.S.LOAD_AND_PROCESSING_ERRORS.obs.subscribe(e=>{console.log(\"IM GETTING THE E HERE: \", e)})\n\n    //    this.e.processButtonEnabled$.subscribe(e => console.log(\"ENABLED: \", e))\n\n    /*\n    this.es.emitError(\n      [], \n      CSV_DIMENSION_ERROR_TYPE_ENUM.REFERENTIAL_INTEGRITY_ERROR, \n      this.s.os.S.LOAD_AND_PROCESSING_ERRORS, [])\n\n      Demonstrates parsing errors\n        const csFile = new CsvFile()\n        csFile.data = parserError\n        cs.loadCSV(csFile, 1)\n    */\n    //    this.s.os.S.CSV_DATA.obs.subscribe((d: any) => {\n    //     console.log(\"GIVE ME THE D: \", d)    })\n\n    /*\n\n    const safetyStockData = new SafetyStockData()\n    safetyStockData.data = ssRows\n\n    this.s.os.put(this.s.os.S.SAFETY_STOCK_DATA, safetyStockData)\n\n    this.s.os.S.SAFETY_STOCK_DATA.obs.subscribe((d: SafetyStockData) => {\n      console.log(\"GIVE ME THE D: \", d)\n        o.runSafetyStockOptimization()\n    })\n*/\n  }\n}","import { Injectable } from '@angular/core';\nimport { StateService } from './state.service'\nimport { Observable, of } from 'rxjs';\nimport {  ROUTES } from '../model'\nimport { map, filter } from 'rxjs/operators'\nimport { Router, NavigationEnd } from '@angular/router'\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RouterStateService {\n    public applicationShowing$: Observable<boolean> = \n    this.s.os.S.IS_APPLICATION_SHOWING.obs\n\n    public applicationNotShowing$: Observable<boolean> = \n    this.s.os.S.IS_APPLICATION_SHOWING.obs.pipe(map(v=>!v))\n  \n\n    constructor(private s: StateService, private r: Router) {\n        this.isApplicationShowing()\n    }\n\n    /**\n     * The process button will\n     * be enabled if the data map size is 1\n     */\n    isApplicationShowing() {\n        const navEndEvents =\n            this.r.events.pipe(\n                filter(event => event instanceof NavigationEnd),\n                map((event: NavigationEnd) => event.url))\n\n        navEndEvents.subscribe(url => {\n\n            switch (url) {\n                case ROUTES.APPLICATION:\n                    this.s.os.put(this.s.os.S.IS_APPLICATION_SHOWING, true)\n                    break;\n                default: {\n                    this.s.os.put(this.s.os.S.IS_APPLICATION_SHOWING, false)\n                }\n            }\n        })\n    }\n}","import { Injectable } from '@angular/core';\nimport { OStore, ObsValueReset, OStoreStart } from '@fireflysemantics/slice'\n\nexport const OSK: OStoreStart = {\n\n  //=================================\n  // CONFIGURATION\n  //=================================\n\n  APPLICATION_CONFIG: { value: null },\n  LOCAL_STORAGE_TERMS_OF_SERVICE_KEY: { value: null },\n  IS_TERMS_OF_SERVICE_ACCEPTED: { value: false },\n\n  //=================================\n  // USER IDENTITY\n  //=================================\n  ON_SIGN_IN: { value: null },\n  ON_SIGN_OUT: { value: null },\n  AMPLIFY_USER: { value: null },\n  USER: { value: null },\n  USER_EMAIL: { value: null },\n  IS_AUTHENTICATED: { value: false },\n\n  //=================================\n  // DATA MANAGEMENT\n  //=================================\n  IS_CSV_DATA_LOADING: { value: false },\n  IS_CSV_DATA_BATCH_RUNNING: { value: false },\n  ON_CSV_DATA_BATCH_UPDATE: { value: 0 },\n  CSV_DATA: { value: null },\n  PROCESS_RESULT: { value: null },\n\n  //=================================\n  // ERROR MANAGEMENT\n  //=================================\n  LOAD_AND_PROCESSING_ERRORS: { value: null },\n\n  //=================================\n  // UI EVENTS\n  //=================================\n  ACTIVE_MENU: { value: null },\n  KEY_HEADER_CHECKBOX_TOGGLE_EVENT: { value: false },\n  TAB_INDEX: { value: 0 },\n\n  //=================================\n  // ROUTER EVENTS\n  //=================================\n  IS_APPLICATION_SHOWING: { value: false }\n}\n\nexport interface OSKI {\n\n  //=================================\n  // CONFIGURATION\n  //=================================\n  APPLICATION_CONFIG: ObsValueReset\n  LOCAL_STORAGE_TERMS_OF_SERVICE_KEY: ObsValueReset\n  IS_TERMS_OF_SERVICE_ACCEPTED: ObsValueReset\n\n  //=================================\n  // USER IDENTITY\n  //=================================\n  ON_SIGN_IN: ObsValueReset\n  ON_SIGN_OUT: ObsValueReset\n  AMPLIFY_USER: ObsValueReset\n  USER: ObsValueReset\n  USER_EMAIL: ObsValueReset\n  IS_AUTHENTICATED: ObsValueReset\n\n  //=================================\n  // DATA MANAGEMENT\n  //=================================\n  IS_CSV_DATA_BATCH_RUNNING: ObsValueReset\n  ON_CSV_DATA_BATCH_UPDATE: ObsValueReset\n  IS_CSV_DATA_LOADING: ObsValueReset\n  CSV_DATA: ObsValueReset,\n  PROCESS_RESULT: ObsValueReset,\n\n  //=================================\n  // ERROR MANAGEMENT\n  //=================================\n  LOAD_AND_PROCESSING_ERRORS: ObsValueReset\n\n\n  //=================================\n  // UI EVENTS\n  //=================================\n  ACTIVE_MENU: ObsValueReset,\n  KEY_HEADER_CHECKBOX_TOGGLE_EVENT: ObsValueReset\n  TAB_INDEX: ObsValueReset\n\n  //=================================\n  // ROUTER EVENTS\n  //=================================\n  IS_APPLICATION_SHOWING: ObsValueReset\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n  os = new OStore<OSKI>(OSK)\n  constructor() { }\n\n  resetErrorState() {\n    this.os.put(\n      this.os.S.LOAD_AND_PROCESSING_ERRORS,\n      null)\n  }\n}","export * from './isAtLeastOneHeaderSelected'\nexport * from './isAtLeastOneKeySelected'\nexport * from './rowConverter'\nexport * from './validateKeyValues'\nexport * from './validateMatchingKeyHeaders'\nexport * from './validateReferentialIntegrity'\nexport * from './validateUniqueCompoundKeys'\nexport * from './validateSelectedHeadersUnique'\nexport * from './validation.service'","import { CsvSelectionData } from '../model/CsvSelectionData'\n\n/**\n  * Check whether at least one header has been selected \n  * from each table.\n  */\nexport function isAtLeastOneHeaderSelected(dataMap: Map<number, CsvSelectionData>): boolean {\n    let selected = true\n    dataMap.forEach(v => {\n        if (!v.getSelectedHeaders().length) {\n            selected = false\n        }\n    })\n    return selected\n}","import { CsvSelectionData } from '../model/CsvSelectionData'\n\n/**\n * Check whether at least one key has been selected \n * from each table.\n */\nexport function isAtLeastOneKeySelected(dataMap: Map<number, CsvSelectionData>): boolean {\n    let selected = true\n    dataMap.forEach(v => {\n        if (!v.getKeyHeaders().length) {\n            selected = false\n        }\n    })\n    return selected\n}\n","/**\n * Convert the object key value pairs to a string.\n * \n * We are using a custom converted to format\n * objects strings where the key is undefined, null,\n * or missing.\n * \n * @param o \n * @return The key value pair string\n */\nexport function rowConverter(o: any): string {\n    const keyValuePairs: string[] = []\n    const keys = Object.keys(o)\n    keys.forEach(k => {\n        const keyValue = `[ ${k} = ${o[k]} ]`\n        keyValuePairs.push(keyValue)\n    })\n    const str: string = keyValuePairs.join(``)\n    return str\n}\n","import { RowKeyError, undefinedRowKeys } from '@fireflysemantics/error'\nimport { FileRowKeyError, CsvSelectionData, rowConverter, IndexedMetaError, FILE_ROW_KEY_ERROR_COLUMNS, ERROR_TYPE_ENUM } from '../model'\n\n/**\n * Validate the key fields in data set have a valid value.\n * \n * Values including '', '   ', null or undefined are flagged.\n * \n * This operation only completes if there are\n * CSV rows to operate on and selected keys.\n */\nexport function validateKeyValues(dataMap: Map<number, CsvSelectionData>): IndexedMetaError {\n    const IME = new IndexedMetaError()\n    IME.tableData.headers = FILE_ROW_KEY_ERROR_COLUMNS\n    IME.type = ERROR_TYPE_ENUM.UNDEFINED_KEY_VALUE_ERROR\n    dataMap.forEach((CSD, k) => {\n        const FRKES: FileRowKeyError[] = []\n        if (CSD.getKeyHeaders().length && CSD.tableData.rows.length) {\n            const RKES: RowKeyError[] = undefinedRowKeys(\n                CSD.tableData.rows,\n                CSD.getKeyHeaders(),\n                rowConverter)\n            RKES.forEach(e => {\n                const FRKE = new FileRowKeyError(e.FIELD, e.ROW, CSD.meta.name)\n                FRKES.push(FRKE)\n            })\n            IME.indexErrors.set(k, FRKES)\n            IME.indexedMeta.set(k, CSD.meta)\n            IME.tableData.rows = [...IME.tableData.rows, ...FRKES]\n        }\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","import { IndexedMetaError, CsvSelectionData, MissingKeyHeaderError } from '../model'\nimport { findMissingStrings, keyUnion } from '@fireflysemantics/collections'\nimport { MISSING_KEY_HEADER_ERROR_COLUMNS, ERROR_TYPE_ENUM } from '../model/error'\n\n/**\n * Validate that the key headers match across all the tables.\n */\nexport function validateMatchingKeyHeaders(\n    dataMap: Map<number, CsvSelectionData>): IndexedMetaError {\n\n    //====================================\n    // Only process when there are at least\n    // Two tables.\n    //====================================\n    if (dataMap.size < 2) {\n        return null\n    }\n\n    //====================================\n    //  Calculate the header superset\n    //====================================\n    const allHeaders = []\n    dataMap.forEach(v => {\n        allHeaders.push(v.getKeyHeaders())\n    })\n    const superset = keyUnion(allHeaders)\n\n    //====================================\n    //  Initialize the error\n    //====================================\n    const IME = new IndexedMetaError()\n    IME.type = ERROR_TYPE_ENUM.KEY_HEADER_ERROR\n    IME.tableData.headers = MISSING_KEY_HEADER_ERROR_COLUMNS\n\n    //====================================\n    //  Check for missing headers\n    //====================================\n    dataMap.forEach((data, k) => {\n        const headers: string[] = data.getKeyHeaders()\n        const MKHES = []\n\n        let missing = findMissingStrings([...superset], headers)\n\n        if (missing && missing.length) {\n            missing.forEach(m => {\n                const error = new MissingKeyHeaderError(\n                    data.meta.name,\n                    m)\n                MKHES.push(error)\n            })\n            IME.indexedMeta.set(k, data.meta)\n            IME.indexErrors.set(k, MKHES)\n            IME.tableData.rows = [...IME.tableData.rows, ...MKHES]\n        }\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","import { MissingObject, IndexedMetaError, CsvSelectionData } from '../model'\nimport { MISSING_OBJECT_ERROR_COLUMNS, ERROR_TYPE_ENUM } from '../model/error'\n\n/**\n * Make sure to refresh state on the CsvSelectionData\n * instance so that the compound keys are generated.\n * \n * Also make sure at least one key and header from each table\n * is selected before running this method.  There should\n * be something to index on and something selected in each\n * table.\n * \n * Use `isAtLeastOneKeySelected`\n * \n * @param dataMap \n * @param errorChannel \n */\nexport function validateReferentialIntegrity(\n    dataMap: Map<number, CsvSelectionData>): IndexedMetaError {\n\n    const IME = new IndexedMetaError()\n    IME.tableData.headers = MISSING_OBJECT_ERROR_COLUMNS\n    IME.type = ERROR_TYPE_ENUM.REFERENTIAL_INTEGRITY_ERROR\n\n    let compoundKeyArray = []\n\n    dataMap.forEach((CSD) => {\n        //console.log(\"COMPOUND KEYS from map\")\n        //console.log([...CSD.compoundKeyMap.keys()])\n        compoundKeyArray = [\n            ...compoundKeyArray,\n            ...CSD.compoundKeyMap.keys()]\n    })\n    //console.log(\"COMPOUND KEY ARRAY\")\n    //console.log(compoundKeyArray)\n\n    const globalKeySet = new Set(compoundKeyArray)\n\n    //console.log(\"GLOBAL KEYSET\")\n    //console.log(globalKeySet)\n    //console.log(globalKeySet.size)\n\n    dataMap.forEach((CSD, CSK) => {\n        const missingObjects = []\n        globalKeySet.forEach(k => {\n            if (!CSD.compoundKeyMap.get(k)) {\n                console.log(CSD.compoundKeyMap)\n                const unMatched = new MissingObject(k, CSD.meta.name)\n                missingObjects.push(unMatched)\n            }\n        })\n        IME.indexErrors.set(CSK, missingObjects)\n        IME.indexedMeta.set(CSK, CSD.meta)\n        IME.tableData.rows = [...IME.tableData.rows, ...missingObjects]\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","import { DUPLICATE_SELECTED_HEADER_ERROR_COLUMNS, DuplicateSelectedHeaderError, CsvSelectionData, IndexedMetaError, ERROR_TYPE_ENUM } from '../model'\nimport { keyUnion } from '@fireflysemantics/collections'\n\n/**\n * Angular Material Data Table\n * will throw getTableDuplicateColumnNameError\n * if there are duplicate column names select across tables.\n * \n * @param dataMap \n * @return The IndexMetaError instance if there were errors null otherwise.\n */\nexport function validateSelectedHeadersUnique(\n    dataMap: Map<number,\n        CsvSelectionData>): IndexedMetaError {\n    //====================================\n    // Only process when there are at least\n    // Two tables.\n    //====================================\n    if (dataMap.size < 2) {\n        return null\n    }\n\n    //====================================\n    //  Calculate the header superset\n    //====================================\n    const allHeaders = []\n    dataMap.forEach(v => {\n        allHeaders.push(v.getSelectedHeaders())\n    })\n    const superset = keyUnion(allHeaders)\n\n    //====================================\n    //  Initialize the error\n    //====================================\n    const IME = new IndexedMetaError()\n    IME.type = ERROR_TYPE_ENUM.SELECTED_HEADER_ERROR\n    IME.tableData.headers = DUPLICATE_SELECTED_HEADER_ERROR_COLUMNS\n\n    //====================================\n    //  Check for duplicate selected headers\n    //====================================\n    const headersSet: Set<string> = new Set()\n\n    dataMap.forEach((data, k) => {\n        const DSHE = []\n\n        data.getSelectedHeaders().\n            forEach(h => {\n                if (!headersSet.has(h)) {\n                    headersSet.add(h)\n                }\n                else {\n                    const error = new DuplicateSelectedHeaderError(\n                        data.meta.name,\n                        h)\n                    DSHE.push(error)\n                }\n            })\n        IME.indexedMeta.set(k, data.meta)\n        IME.indexErrors.set(k, DSHE)\n        IME.tableData.rows = [...IME.tableData.rows, ...DSHE]\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","import { IndexedMetaError, CsvSelectionData } from '../model'\nimport { duplicateCompoundKeys } from '@fireflysemantics/collections'\nimport { FileRowDuplicatesError, FILE_ROW_DULICATES_ERROR_COLUMNS, ERROR_TYPE_ENUM } from '../model/error'\nimport { rowConverter } from './rowConverter'\n\n/**\n * This will check whether the \n * compound key is unique across all records \n * in each table.\n * \n * If they are not then the combine operation\n * will overwrite one row with another\n * as it uses maps to perform the operation.\n * \n * @param dataMap The map of CsvSelectionData instances\n * @return An `IndexedMetaError` instance or null if there are no errors\n */\nexport function validateUniqueCompoundKeys(\n    dataMap: Map<number, CsvSelectionData>):\n    IndexedMetaError {\n\n    const IME = new IndexedMetaError()\n    IME.type = ERROR_TYPE_ENUM.DUPLICATES_ERROR\n    IME.tableData.headers = FILE_ROW_DULICATES_ERROR_COLUMNS\n\n    dataMap.forEach((CSD, k) => {\n        if (CSD.getKeyHeaders().length) {\n\n            const duplicates = duplicateCompoundKeys(\n                CSD.tableData.rows,\n                CSD.getKeyHeaders())\n\n            const duplicateEntities: FileRowDuplicatesError[] =\n                duplicates.map(d => {\n                    const rowString = rowConverter(d)\n                    const duplicateEntity = new FileRowDuplicatesError(\n                        rowString,\n                        CSD.meta.name)\n                    return duplicateEntity\n                })\n\n            IME.indexErrors.set(k, duplicateEntities)\n            IME.indexedMeta.set(k, CSD.meta)\n            IME.tableData.rows = [...IME.tableData.rows, ...duplicateEntities]\n        }\n    })\n    return IME.tableData.rows.length ? IME : null;\n}","import { Injectable } from '@angular/core';\nimport { IndexedMetaError, CsvSelectionData } from '../model'\nimport { StateService } from '../state/state.service'\nimport { ObsValueReset } from '@fireflysemantics/slice';\nimport { validateKeyValues } from './validateKeyValues'\nimport { validateSelectedHeadersUnique } from './validateSelectedHeadersUnique'\nimport { validateMatchingKeyHeaders } from './validateMatchingKeyHeaders'\nimport { validateUniqueCompoundKeys } from './validateUniqueCompoundKeys'\nimport { validateReferentialIntegrity } from './validateReferentialIntegrity'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n\n  constructor(private s: StateService) { }\n\n  /**\n   * Validate the key fields of the csv data.\n   * Validate the key fields of each \n   * each set of CSV entities.\n   * @param dataMap The map containing the CSV Entities\n   * @param errorChannel The error channel\n   * @return The IME if there are errors otherwise null \n   * \n    //========================================\n    // Validate the key fields for each table\n    //========================================\n    // EXAMPLE\n    //========================================\n    // Suppose Table 1 has SKU marked as a key.\n    // Row 3 has undefined or null for SKU\n    // Row 3 now has a validation error created \n    // for it.\n    //========================================\n   */\n  checkKeyValues(\n    dataMap: Map<number, CsvSelectionData>,\n    errorChannel: ObsValueReset): boolean {\n\n    const IME = validateKeyValues(dataMap)\n    return this.emitError(IME, errorChannel)\n  }\n\n  /**\n   * Validate that the key headers match across all the tables.\n   * @param dataMap The map containing the CSV Entities\n   * @param errorChannel The error channel\n   * @return The IME if there are errors otherwise null \n \n   */\n  checkMatchingKeyHeaders(\n    dataMap: Map<number, CsvSelectionData>,\n    errorChannel: ObsValueReset): boolean {\n\n    const IME: IndexedMetaError = validateMatchingKeyHeaders(dataMap)\n    return this.emitError(IME, errorChannel)\n  }\n\n  checkUnqiueSelectedHeaders(\n    dataMap: Map<number, CsvSelectionData>,\n    errorChannel: ObsValueReset): boolean {\n    const IME: IndexedMetaError = validateSelectedHeadersUnique(dataMap)\n    return this.emitError(IME, errorChannel)\n  }\n\n  /**\n   * Validate the compound key fields \n   * are unique.\n   * @param dataMap The map containing the CSV Entities\n   * @param errorChannel The error channel\n   * @return The IME if there are errors otherwise null \n   * \n    // EXAMPLE\n    //========================================\n    // Suppose Table 1 has SKU and LOCATION \n    // marked as keys.\n    // Row 1: FS1CHICAGO\n    // ROW 2: FS!CHICAGO\n    // Rows 1 and 2 have duplicate compound keys.\n    //========================================\n   */\n  checkCompoundKeyUniqueness(\n    dataMap: Map<number, CsvSelectionData>,\n    errorChannel: ObsValueReset): boolean {\n    const IME = validateUniqueCompoundKeys(dataMap)\n    return this.emitError(IME, errorChannel)\n  }\n\n  /**\n   * Check referential integrity\n   * \n   * @param dataMap The data map\n   * @param errorChannel The error channel\n   * @return The IME if there are errors otherwise null \n   */\n  checkReferentialIntegrity(\n    dataMap: Map<number, CsvSelectionData>,\n    errorChannel: ObsValueReset): boolean {\n    const IME: IndexedMetaError = validateReferentialIntegrity(dataMap)\n    return this.emitError(IME, errorChannel)\n  }\n\n  /**\n   * Emit the errors if there are any.\n   * @return true if an error is emitted, false otherwise \n   */\n  emitError(IME: IndexedMetaError, errorChannel: ObsValueReset) {\n    if (IME && IME.tableData.rows.length && errorChannel) {\n      this.s.os.put(errorChannel, IME)\n      return true\n    }\n    return false\n  }\n}","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:485bc07d-2ee3-4e34-8c3a-6e73b6db22fc\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_z5PA9UXM6\",\n    \"aws_user_pools_web_client_id\": \"u5e8quees6mvrm241n3ng8j6m\",\n    \"oauth\": {\n        \"domain\": \"csvfd66a523-fd66a523-production.auth.us-east-1.amazoncognito.com\",\n        \"scope\": [\n            \"phone\",\n            \"email\",\n            \"openid\",\n            \"profile\",\n            \"aws.cognito.signin.user.admin\"\n        ],\n        \"redirectSignIn\": \"https://csv.fireflysemantics.com/\",\n        \"redirectSignOut\": \"https://csv.fireflysemantics.com/\",\n        \"responseType\": \"code\"\n    },\n    \"federationTarget\": \"COGNITO_USER_POOLS\"\n};\n\nexport default awsmobile;\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport Amplify from 'aws-amplify';\nimport { Auth } from '@aws-amplify/auth'\nimport awsconfig from './aws-exports';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\nAmplify.configure(awsconfig);\nAuth.configure(awsconfig)"],"sourceRoot":"webpack:///"}